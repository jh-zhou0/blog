import{_ as n,o as s,c as a,e}from"./app-66d6b4fd.js";const p="/blog/uml/Snipaste_2023-07-21_15-38-48.png",t="/blog/uml/Snipaste_2023-07-21_14-49-40.png",o="/blog/uml/Snipaste_2023-07-21_15-38-11.png",c="/blog/uml/Snipaste_2023-07-21_14-54-42.png",i="/blog/uml/Snipaste_2023-07-21_15-37-01.png",l="/blog/uml/Snipaste_2023-07-21_15-11-44.png",d="/blog/uml/Snipaste_2023-07-21_15-36-29.png",r="/blog/uml/Snipaste_2023-07-21_15-21-38.png",u="/blog/uml/Snipaste_2023-07-21_15-35-53.png",v="/blog/uml/Snipaste_2023-07-21_15-35-20.png",k={},m=e('<h1 id="uml类图" tabindex="-1"><a class="header-anchor" href="#uml类图" aria-hidden="true">#</a> UML类图</h1><p><strong>UML类图</strong>：用于描述系统中的类(对象)本身的组成和类(对象)之间的各种静态关系。</p><p>类之间的关系： <code>依赖、泛化（继承）、实现、关联、聚合与组合。</code></p><h2 id="_1-泛化关系-generalization" tabindex="-1"><a class="header-anchor" href="#_1-泛化关系-generalization" aria-hidden="true">#</a> 1.泛化关系（generalization）</h2><p>泛化关系其实就是<strong>继承关系</strong>：指的是一个类（称为子类、子接口）继承(<code>extends</code>)另外的一个类（称为父类、父接口）的功能，并可以增加自己额外的一些功能，<strong>继承是类与类或者接口与接口之间最常见的关系；</strong></p><p>在UML类图中，继承通常使用 <strong>空心三角+实线</strong> 表示。</p><p><img src="'+p+`" alt="Snipaste_2023-07-21_15-38-48"></p><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Man</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>UML类图：</strong></p><p><img src="`+t+'" alt="Snipaste_2023-07-21_14-49-40"></p><h2 id="_2-实现关系-realization" tabindex="-1"><a class="header-anchor" href="#_2-实现关系-realization" aria-hidden="true">#</a> 2.实现关系（realization）</h2><p><strong>实现关系</strong>：指的是一个class类实现 interface 接口（可以实现多个接口）的功能；实现是类与接口之间最常见的关系；</p><p>在UML类图中，实现通常使用<strong>空心三角+虚线</strong>表示。</p><p><img src="'+o+`" alt="Snipaste_2023-07-21_15-38-11"></p><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token function">saveOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">OrderService</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">saveOrder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;下单&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>UML类图：</strong></p><p><img src="`+c+'" alt="Snipaste_2023-07-21_14-54-42"></p><h2 id="_3-依赖关系-dependent" tabindex="-1"><a class="header-anchor" href="#_3-依赖关系-dependent" aria-hidden="true">#</a> 3.依赖关系（dependent）</h2><p><strong>依赖关系</strong>：指的是类与类之间的联接。依赖关系表示<code>一个类依赖于另一个类的定义</code>。一般而言，依赖关系在Java语言中体现为<strong>成员变量、局域变量、方法的形参、方法返回值</strong>，或者<strong>对静态方法的调用。</strong></p><p>在UML类图中，依赖通常使用<strong>虚线箭头</strong>表示。</p><p><img src="'+i+`" alt="Snipaste_2023-07-21_15-37-01"></p><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> <span class="token class-name">Gas</span> gas<span class="token punctuation">;</span> <span class="token comment">// 依赖关系情况1: 成员变量. 这也是关联关系</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">drive</span><span class="token punctuation">(</span><span class="token class-name">People</span> people<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 依赖关系情况2: 方法参数</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">spurt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Water</span> water<span class="token punctuation">;</span> <span class="token comment">// 依赖关系情况3: 方法内的局部变量</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 依赖关系情况4: 方法内的返回值</span>
    <span class="token keyword">public</span> <span class="token class-name">State</span> <span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">State</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>

    <span class="token comment">// 依赖关系情况5: 对静态方法的调用</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Run</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Gas</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">People</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">State</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Water</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Run</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>UML图：</strong></p><p><img src="`+l+'" alt="Snipaste_2023-07-21_15-11-44"></p><h2 id="_4-关联关系-association" tabindex="-1"><a class="header-anchor" href="#_4-关联关系-association" aria-hidden="true">#</a> 4.关联关系（association）</h2><p><strong>关联关系</strong>：指的是<code>类与类之间的联接</code>，<strong><code>它使一个类知道另一个类的属性和方法（实例变量体现）</code></strong>。A类依赖于B对象，并且把B作为A的一个成员变量,，则A和B存在关联关系。</p><p>在UML类图中，关联通常使用<strong>实线箭头</strong>表示。</p><p><img src="'+d+`" alt="Snipaste_2023-07-21_15-36-29"></p><p>如 [3.依赖关系] 中的UML图：Car与Gas就存在一对一的关联关系。</p><p><strong>示例：</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Color</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Human</span> <span class="token punctuation">{</span>
    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Color</span><span class="token punctuation">&gt;</span></span> colors<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>UML图：</strong></p><p><img src="`+r+'" alt="Snipaste_2023-07-21_15-21-38"></p><p>如上图所示，Human和Color存在一对多的关系。</p><h2 id="_5-聚合关系-aggregtion" tabindex="-1"><a class="header-anchor" href="#_5-聚合关系-aggregtion" aria-hidden="true">#</a> 5.聚合关系（aggregtion）</h2><p><strong>聚合关系</strong>是<strong>关联关系</strong>的一种特例，他体现的是整体与部分，是一种<strong>弱拥有</strong>的关系，即<code>has-a</code>的关系。聚合是<code>整体</code>和<code>个体</code>之间的关系。</p><p>与<strong>关联关系</strong>一样，<strong>聚合关系</strong> 也是通过<strong>实例变量</strong>实现的。<strong>但是关联关系所涉及的两个类是处在同一层次上的，而在聚合关系中，两个类是处在不平等层次上的，一个代表整体，另一个代表部分。</strong></p><p>在UML类图中，聚合通常使用<strong>空心菱形+实线箭头</strong>表示。</p><p><img src="'+u+'" alt="Snipaste_2023-07-21_15-35-53"></p><h2 id="_6-组合关系-composition" tabindex="-1"><a class="header-anchor" href="#_6-组合关系-composition" aria-hidden="true">#</a> 6.组合关系（composition）</h2><p><strong>组合关系</strong>是<strong>关联关系</strong>的一种特例，他体现的是一种<code>contains-a</code>(包含)的关系，这种关系比聚合更强，也称为<strong>强聚合</strong>。</p><p>整体和个体不能独立存在，一定是在一个模块中同时管理整体和个体，生命周期必须相同(级联)。</p><p>在UML类图中，组合通常使用<strong>实心菱形+实线箭头</strong>表示。</p><p><img src="'+v+'" alt="Snipaste_2023-07-21_15-35-20"></p>',55),g=[m];function b(_,h){return s(),a("div",null,g)}const y=n(k,[["render",b],["__file","UML类图.html.vue"]]);export{y as default};
