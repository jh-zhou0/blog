import{_ as p,r as o,o as c,c as i,a as n,d as s,b as e,e as t}from"./app-66d6b4fd.js";const l="/blog/kayson/Snipaste_2023-06-14_18-58-06.png",u="/blog/kayson/Snipaste_2023-06-14_19-14-37.png",r="/blog/kayson/Snipaste_2023-06-14_19-17-30.png",d="/blog/kayson/Snipaste_2023-06-14_19-21-44.png",k={},m=n("h1",{id:"redis-缓存",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#redis-缓存","aria-hidden":"true"},"#"),s(" Redis 缓存")],-1),v={href:"https://gitee.com/jhzhou/kayson/tree/master/kayson-framework/kayson-spring-boot-starter-redis",target:"_blank",rel:"noopener noreferrer"},h=t(`<ul><li>编程式缓存：基于 Spring Data Redis 框架的 RedisTemplate 操作模板</li><li>声明式缓存：基于 Spring Cache 框架的 <code>@Cacheable</code> 等等注解</li></ul><h2 id="_1-编程式缓存" tabindex="-1"><a class="header-anchor" href="#_1-编程式缓存" aria-hidden="true">#</a> 1. 编程式缓存</h2><p>引入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>由于 Redisson 提供了分布式锁、队列、限流等特性，所以使用它作为 Spring Data Redis 的客户端。</p><h3 id="_1-1-spring-data-redis-配置" tabindex="-1"><a class="header-anchor" href="#_1-1-spring-data-redis-配置" aria-hidden="true">#</a> 1.1 Spring Data Redis 配置</h3><p>① 在 <code>application-local.yaml</code>配置文件中，通过 <code>spring.redis</code> 配置项，设置 Redis 的配置。如下图所示：</p><p><img src="`+l+`" alt="Snipaste_2023-06-14_18-58-06"></p><p>② 在 KaysonRedisAutoConfiguration 配置类，设置使用 JSON 序列化 value 值。如下图所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@AutoConfiguration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KaysonRedisAutoConfiguration</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisConnectionFactory</span> factory<span class="token punctuation">;</span>
    
    <span class="token doc-comment comment">/**
     * 创建 RedisTemplate Bean，使用 JSON 序列化方式
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">redisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 RedisTemplate 对象</span>
        <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置 RedisConnection 工厂。😈 它就是实现多种 Java Redis 客户端接入的秘密工厂。</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 使用 String 序列化方式，序列化 KEY</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setKeySerializer</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializer</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashKeySerializer</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializer</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 使用 JSON 序列化方式（库是 Jackson ），序列化 VALUE</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setValueSerializer</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializer</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">setHashValueSerializer</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializer</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> redisTemplate<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-2redis-key-定义" tabindex="-1"><a class="header-anchor" href="#_1-2redis-key-定义" aria-hidden="true">#</a> 1.2Redis Key 定义</h3>`,11),b={href:"https://gitee.com/jhzhou/kayson/blob/master/kayson-framework/kayson-spring-boot-starter-redis/src/main/java/cn/zjh/kayson/framework/redis/core/RedisKeyDefine.java",target:"_blank",rel:"noopener noreferrer"},g={class:"custom-container tip"},f=n("p",{class:"custom-container-title"},"提示:",-1),_=n("li",null,"① 如果值是【简单】的 String 或者 Integer 等类型，无需创建数据实体。",-1),y=n("code",null,"dal/dataobject",-1),R={href:"https://gitee.com/jhzhou/kayson/blob/master/kayson-module-system/kayson-module-system-biz/src/main/java/cn/zjh/kayson/module/system/dal/dataobject/oauth2/OAuth2AccessTokenDO.java",target:"_blank",rel:"noopener noreferrer"},C=t(`<h3 id="_1-3rediskeyconstants" tabindex="-1"><a class="header-anchor" href="#_1-3rediskeyconstants" aria-hidden="true">#</a> 1.3RedisKeyConstants</h3><div class="custom-container tip"><p class="custom-container-title">为什么要定义 Redis Key 常量？</p><p>每个 <code>kayson-module-xxx</code> 模块，都有一个 RedisKeyConstants 类，定义该模块的 Redis Key 的信息。目的是，避免 Redis Key 散落在 Service 业务代码中，像对待数据库的表一样，对待每个 Redis Key。通过这样的方式，如果我们想要了解一个模块的 Redis 的使用情况，只需要查看 RedisKeyConstants 类即可。</p></div><p>在 <code>kayson-module-system</code> 模块的 RedisKeyConstants 类中，创建了 OAuth2AccessTokenDO 对应的 Redis Key 定义 <code>OAUTH2_ACCESS_TOKEN</code>。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * System Redis Key 枚举类
 * 
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RedisKeyConstants</span> <span class="token punctuation">{</span>
    
    <span class="token class-name">RedisKeyDefine</span> <span class="token constant">OAUTH2_ACCESS_TOKEN</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RedisKeyDefine</span><span class="token punctuation">(</span><span class="token string">&quot;访问令牌的缓存&quot;</span><span class="token punctuation">,</span>
            <span class="token string">&quot;oauth2_access_token:%s&quot;</span><span class="token punctuation">,</span> <span class="token comment">// 参数为访问令牌 token</span>
            <span class="token class-name">RedisKeyDefine<span class="token punctuation">.</span>KeyTypeEnum</span><span class="token punctuation">.</span><span class="token constant">STRING</span><span class="token punctuation">,</span>
            <span class="token class-name">OAuth2AccessTokenDO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> 
            <span class="token class-name">RedisKeyDefine<span class="token punctuation">.</span>TimeoutTypeEnum</span><span class="token punctuation">.</span><span class="token constant">DYNAMIC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4oauth2accesstokenredisdao" tabindex="-1"><a class="header-anchor" href="#_1-4oauth2accesstokenredisdao" aria-hidden="true">#</a> 1.4OAuth2AccessTokenRedisDAO</h3><p>OAuth2AccessTokenRedisDAO 类，是 OAuth2AccessTokenDO 的 RedisDAO 实现。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Repository</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OAuth2AccessTokenRedisDAO</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">StringRedisTemplate</span> stringRedisTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">OAuth2AccessTokenDO</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">String</span> accessToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> redisKey <span class="token operator">=</span> <span class="token function">formatKey</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">OAuth2AccessTokenDO</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">OAuth2AccessTokenDO</span> accessTokenDO<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> redisKey <span class="token operator">=</span> <span class="token function">formatKey</span><span class="token punctuation">(</span>accessTokenDO<span class="token punctuation">.</span><span class="token function">getAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 清理多余字段，避免缓存</span>
        accessTokenDO<span class="token punctuation">.</span><span class="token function">setUpdater</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setUpdateTime</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCreateTime</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCreator</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setDeleted</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token class-name">LocalDateTimeUtil</span><span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token class-name">LocalDateTime</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> accessTokenDO<span class="token punctuation">.</span><span class="token function">getExpiresTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">ChronoUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">,</span> <span class="token class-name">JsonUtils</span><span class="token punctuation">.</span><span class="token function">toJsonString</span><span class="token punctuation">(</span>accessTokenDO<span class="token punctuation">)</span><span class="token punctuation">,</span> time<span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">String</span> accessToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> redisKey <span class="token operator">=</span> <span class="token function">formatKey</span><span class="token punctuation">(</span>accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>redisKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">deleteList</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> accessTokens<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> redisKeys <span class="token operator">=</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">convertList</span><span class="token punctuation">(</span>accessTokens<span class="token punctuation">,</span> <span class="token class-name">OAuth2AccessTokenRedisDAO</span><span class="token operator">::</span><span class="token function">formatKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        stringRedisTemplate<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>redisKeys<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">formatKey</span><span class="token punctuation">(</span><span class="token class-name">String</span> accessToken<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token constant">OAUTH2_ACCESS_TOKEN</span><span class="token punctuation">.</span><span class="token function">getKeyTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-5使用" tabindex="-1"><a class="header-anchor" href="#_1-5使用" aria-hidden="true">#</a> 1.5使用</h3><p>只需在类中引入 OAuth2AccessTokenRedisDAO Bean，就可以非常简洁干净的进行 OAuth2AccessTokenDO 的缓存操作，无需关心具体的实现。</p><p><img src="`+u+`" alt="Snipaste_2023-06-14_19-14-37"></p><h2 id="_2-声明式缓存" tabindex="-1"><a class="header-anchor" href="#_2-声明式缓存" aria-hidden="true">#</a> 2. 声明式缓存</h2><p>引入依赖</p><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-cache<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>相比来说 Spring Data Redis 编程式缓存，Spring Cache 声明式缓存的使用更加便利，一个 <code>@Cacheable</code> 注解即可实现缓存的功能。示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;users&quot;</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#id&quot;</span><span class="token punctuation">)</span>
<span class="token class-name">UserDO</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-1-spring-cache-配置" tabindex="-1"><a class="header-anchor" href="#_2-1-spring-cache-配置" aria-hidden="true">#</a> 2.1 Spring Cache 配置</h3><p>① 在 application.yaml 配置文件中，通过 spring.redis 配置项，设置 Redis 的配置。如下图所示：</p><p><img src="`+r+`" alt="Snipaste_2023-06-14_19-17-30"></p><p>② 在 KaysonCacheAutoConfiguration 配置类，设置使用 JSON 序列化 value 值。如下所示：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Cache 配置类，基于 Redis 实现
 * 
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@AutoConfiguration</span>
<span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">CacheProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@EnableCaching</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KaysonCacheAutoConfiguration</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * RedisCacheConfiguration Bean
     *
     * 参考 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span>cache<span class="token punctuation">.</span></span><span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">#</span><span class="token field">createConfiguration</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token annotation punctuation">@Primary</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisCacheConfiguration</span> <span class="token function">redisCacheConfiguration</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span> cacheProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 设置使用 JSON 序列化方式</span>
        <span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializer</span><span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 设置 CacheProperties.Redis 的属性</span>
        <span class="token class-name">CacheProperties<span class="token punctuation">.</span>Redis</span> redisProperties <span class="token operator">=</span> cacheProperties<span class="token punctuation">.</span><span class="token function">getRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">prefixCacheNameWith</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isCacheNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isUseKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> config<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-常见注解" tabindex="-1"><a class="header-anchor" href="#_2-2-常见注解" aria-hidden="true">#</a> 2.2 常见注解</h3><h4 id="_2-2-1-cacheable-注解" tabindex="-1"><a class="header-anchor" href="#_2-2-1-cacheable-注解" aria-hidden="true">#</a> 2.2.1 @Cacheable 注解</h4>`,22),T={href:"https://github.com/spring-projects/spring-framework/blob/main/spring-context/src/main/java/org/springframework/cache/annotation/Cacheable.java",target:"_blank",rel:"noopener noreferrer"},S=n("code",null,"@Cacheable",-1),w=n("ul",null,[n("li",null,"1）首先，判断方法执行结果的缓存。如果有，则直接返回该缓存结果。"),n("li",null,"2）然后，执行方法，获得方法结果。"),n("li",null,"3）之后，根据是否满足缓存的条件。如果满足，则缓存方法结果到缓存。"),n("li",null,"4）最后，返回方法结果。")],-1),j=n("h4",{id:"_2-2-2-cacheput-注解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-2-2-cacheput-注解","aria-hidden":"true"},"#"),s(" 2.2.2 @CachePut 注解")],-1),O={href:"https://github.com/spring-projects/spring-framework/blob/main/spring-context/src/main/java/org/springframework/cache/annotation/CachePut.java",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"@CachePut",-1),x=n("code",null,"@Cacheable",-1),K=n("ul",null,[n("li",null,"1）首先，执行方法，获得方法结果。也就是说，无论是否有缓存，都会执行方法。"),n("li",null,"2）然后，根据是否满足缓存的条件。如果满足，则缓存方法结果到缓存。"),n("li",null,"3）最后，返回方法结果。")],-1),D=n("h4",{id:"_2-2-3-cacheevict-注解",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-2-3-cacheevict-注解","aria-hidden":"true"},"#"),s(" 2.2.3 @CacheEvict 注解")],-1),z={href:"https://github.com/spring-projects/spring-framework/blob/master/spring-context/src/main/java/org/springframework/cache/annotation/CacheEvict.java",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"@CacheEvict",-1),E=n("h3",{id:"_2-3使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-3使用","aria-hidden":"true"},"#"),s(" 2.3使用")],-1),N=n("p",null,[n("img",{src:d,alt:"Snipaste_2023-06-14_19-21-44"})],-1),I=n("ul",null,[n("li",null,"【被动读】相对能够保证 Redis 与 MySQL 的一致性"),n("li",null,"绝大数数据不需要放到 Redis 缓存中，采用【主动写】会将非必要的数据进行缓存")],-1),U={class:"custom-container tip"},L=n("p",{class:"custom-container-title"},"友情提示：",-1),V={href:"https://www.iocoder.cn/Fight/How-Redis-and-MySQL-double-write-consistency-guarantee/?yudao",target:"_blank",rel:"noopener noreferrer"},J=n("h3",{id:"_2-4-过期时间",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_2-4-过期时间","aria-hidden":"true"},"#"),s(" 2.4 过期时间")],-1),B=n("p",null,[s("Spring Cache 默认使用 "),n("code",null,"spring.cache.redis.time-to-live"),s(" 配置项，设置缓存的过期时间，项目默认为 1 小时。")],-1),q={href:"https://juejin.cn/post/7102222578026020871",target:"_blank",rel:"noopener noreferrer"},H=n("h2",{id:"_3-redis-监控",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_3-redis-监控","aria-hidden":"true"},"#"),s(" 3. Redis 监控")],-1),F={href:"https://gitee.com/jhzhou/kayson/blob/master/kayson-module-infra/kayson-module-infra-biz/src/main/java/cn/zjh/kayson/module/infra/controller/admin/redis/RedisController.java",target:"_blank",rel:"noopener noreferrer"},M=n("p",null,"点击 [基础设施 -> Redis 监控] 菜单，可以查看到 Redis 的基础信息、命令统计、内存信息。",-1);function Q(W,Y){const a=o("ExternalLinkIcon");return c(),i("div",null,[m,n("p",null,[n("a",v,[s("kayson-spring-boot-starter-redis"),e(a)]),s(" 技术组件，使用 Redis 实现缓存的功能，它有 2 种使用方式：")]),h,n("p",null,[s("通过 "),n("a",b,[s("RedisKeyDefine"),e(a)]),s(" 类定义 Redis Key")]),n("div",g,[f,n("ul",null,[_,n("li",null,[s("② 如果值是【复杂对象】时，建议在 "),y,s(" 包下，创建对应的数据实体，例如说访问令牌 Access Token 类 "),n("a",R,[s("OAuth2AccessTokenDO"),e(a)]),s("。")])])]),C,n("p",null,[n("a",T,[S,s(),e(a)]),s("注解：添加在方法上，缓存方法的执行结果。执行过程如下：")]),w,j,n("p",null,[n("a",O,[A,s(),e(a)]),s("注解，添加在方法上，缓存方法的执行结果。不同于 "),x,s(" 注解，它的执行过程如下：")]),K,D,n("p",null,[n("a",z,[P,e(a)]),s("注解，添加在方法上，删除缓存。")]),E,N,I,n("div",U,[L,n("p",null,[s("如果你未学习过 MySQL 与 Redis 一致性的问题，可以后续阅读 "),n("a",V,[s("《Redis 与 MySQL 双写一致性如何保证？ 》"),e(a)]),s("文章。")])]),J,B,n("p",null,[s("如果你想自定义过期时间，可参考 "),n("a",q,[s("《Spring @Cacheable 扩展支持自定义过期时间 》"),e(a)]),s(" 文章。")]),H,n("p",null,[s("kayson-module-infra 的 redis 模块中 "),n("a",F,[s("RedisController"),e(a)]),s("，提供了 Redis 监控的功能。")]),M])}const X=p(k,[["render",Q],["__file","Redis缓存.html.vue"]]);export{X as default};
