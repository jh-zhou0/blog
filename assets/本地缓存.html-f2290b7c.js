import{_ as n,o as s,c as a,e}from"./app-66d6b4fd.js";const t="/blog/kayson/Snipaste_2023-06-14_19-45-42.png",p="/blog/kayson/Snipaste_2023-06-14_19-49-03.png",c="/blog/kayson/Snipaste_2023-06-14_19-52-39.png",o={},i=e('<h1 id="本地缓存" tabindex="-1"><a class="header-anchor" href="#本地缓存" aria-hidden="true">#</a> 本地缓存</h1><p>系统使用本地缓存，提升公用逻辑的执行性能。 例如说：</p><p>【租户模块】缓存租户信息，每次 RESTful API 校验租户是否禁用、过期时，无需读库。</p><p>【部门模块】缓存部门信息，每次数据权限校验时，无需读库。</p><p>【权限模块】缓存权限信息，每次功能权限校验时，无需读库。</p><h2 id="_1-实现原理" tabindex="-1"><a class="header-anchor" href="#_1-实现原理" aria-hidden="true">#</a> 1.实现原理</h2><p>本地缓存的实现，一共有两步，如下图所示：</p><p><img src="'+t+`" alt="Snipaste_2023-06-14_19-45-42"></p><ul><li>项目启动时，初始化缓存：从数据库中读取数据，写入到本地缓存（例如说一个 Map 对象）</li><li>数据变化时，实时刷新缓存：（例如说通过管理后台修改数据）重新从数据库中读取数据，重新写入到本地缓存</li></ul><h2 id="_2-实战案例" tabindex="-1"><a class="header-anchor" href="#_2-实战案例" aria-hidden="true">#</a> 2. 实战案例</h2><p>以 【角色模块 】为例，讲解如何实现角色信息的本地缓存。</p><h3 id="_2-1-初始化缓存" tabindex="-1"><a class="header-anchor" href="#_2-1-初始化缓存" aria-hidden="true">#</a> 2.1 初始化缓存</h3><p>① 在 RoleService 接口中，定义 #initLocalCache() 方法。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// RoleService.java</span>

<span class="token doc-comment comment">/**
 * 初始化角色的本地缓存
 */</span>
<span class="token keyword">void</span> <span class="token function">initLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>为什么要定义接口方法？</p><p>稍后实时刷新缓存时，会调用 RoleService 接口的该方法。</p></div><p>② 在 RoleServiceImpl 类中，实现 #initLocalCache() 方法，通过 @PostConstruct 注解，在项目启动时进行本地缓存的初始化。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// RoleServiceImpl.java</span>

<span class="token doc-comment comment">/**
 * 角色缓存
 * key：角色编号 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RoleDO</span><span class="token punctuation">#</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">}</span>
 *
 * 这里声明 volatile 修饰的原因是，每次刷新时，直接修改指向
 */</span>
<span class="token annotation punctuation">@Getter</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">RoleDO</span><span class="token punctuation">&gt;</span></span> roleCache<span class="token punctuation">;</span>

<span class="token doc-comment comment">/**
 * 初始化 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">roleCache</span></span><span class="token punctuation">}</span> 缓存
 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token annotation punctuation">@PostConstruct</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 注意：忽略自动多租户，因为要全局初始化缓存</span>
    <span class="token class-name">TenantUtils</span><span class="token punctuation">.</span><span class="token function">executeIgnore</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">// 第一步：查询数据</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoleDO</span><span class="token punctuation">&gt;</span></span> roleList <span class="token operator">=</span> roleMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[initLocalCache][缓存角色，数量为:{}]&quot;</span><span class="token punctuation">,</span> roleList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
        <span class="token comment">// 第二步：构建缓存</span>
        roleCache <span class="token operator">=</span> <span class="token class-name">CollectionUtils</span><span class="token punctuation">.</span><span class="token function">convertMap</span><span class="token punctuation">(</span>roleList<span class="token punctuation">,</span> <span class="token class-name">RoleDO</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">提示</p><p>疑问：为什么使用 TenantUtils 的 executeIgnore 方法来执行逻辑？</p><p>由于 RoleDO 是多租户隔离，如果使用 TenantUtils 方法，会导致缓存刷新时，只加载某个租户的角色数据，导致本地缓存的错误。 所以，如果缓存的数据不存在多租户隔离的情况，可以不使用 TenantUtils 方法！！！！</p></div><h3 id="_2-2-实时刷新缓存" tabindex="-1"><a class="header-anchor" href="#_2-2-实时刷新缓存" aria-hidden="true">#</a> 2.2 实时刷新缓存</h3><p>为什么需要使用 Redis Pub/Sub 来实时刷新缓存？</p><p>考虑到高可用，线上会部署多个 JVM 实例，需要通过 Redis 广播到所有实例，实现本地缓存的刷新。</p><p><img src="`+p+`" alt="Snipaste_2023-06-14_19-49-03"></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>Redis Pub/Sub 的使用与讲解，可见 《消息队列》 文档。</p></div><h4 id="_2-2-1-rolerefreshmessage" tabindex="-1"><a class="header-anchor" href="#_2-2-1-rolerefreshmessage" aria-hidden="true">#</a> 2.2.1 RoleRefreshMessage</h4><p>新建 RoleRefreshMessage 类，角色数据刷新 Message。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Data</span>
<span class="token annotation punctuation">@EqualsAndHashCode</span><span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoleRefreshMessage</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractChannelMessage</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token string">&quot;system.role.refresh&quot;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-2-2-roleproducer" tabindex="-1"><a class="header-anchor" href="#_2-2-2-roleproducer" aria-hidden="true">#</a> 2.2.2 RoleProducer</h4><p>① 新建 RoleProducer 类，RoleRefreshMessage 的 Producer 生产者。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoleProducer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RedisMQTemplate</span> redisMQTemplate<span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 发送 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RoleRefreshMessage</span></span><span class="token punctuation">}</span> 消息
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendRoleRefreshMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RoleRefreshMessage</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RoleRefreshMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        redisMQTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>② 在数据的新增 / 修改 / 删除等写入操作时，需要使用 RoleProducer 发送消息。如下图所示：</p><p><img src="`+c+`" alt="Snipaste_2023-06-14_19-52-39"></p><p>如果使用了Spring事务@Transaction注解，则需要在事务commit后发送消息。</p><p>原因：如果事务还没commit，消息就被消费了，则刷新缓存读不到这条数据的最新状态。</p><h4 id="_2-2-3-rolerefreshconsumer" tabindex="-1"><a class="header-anchor" href="#_2-2-3-rolerefreshconsumer" aria-hidden="true">#</a> 2.2.3 RoleRefreshConsumer</h4><p>新建 RoleRefreshConsumer 类，RoleRefreshMessage 的 Consumer 消费者，刷新本地缓存。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoleRefreshConsumer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractChannelMessageListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RoleRefreshMessage</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RoleService</span> roleService<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">RoleRefreshMessage</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[onMessage][收到 Role 刷新消息]&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        roleService<span class="token punctuation">.</span><span class="token function">initLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,36),l=[i];function u(r,d){return s(),a("div",null,l)}const v=n(o,[["render",u],["__file","本地缓存.html.vue"]]);export{v as default};
