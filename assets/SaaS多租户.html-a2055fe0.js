import{_ as p,r as o,o as c,c as l,a as s,d as n,b as e,e as t}from"./app-66d6b4fd.js";const i="/blog/kayson/Snipaste_2023-06-13_14-37-47.png",u="/blog/kayson/Snipaste_2023-06-13_14-39-46.png",r="/blog/kayson/Snipaste_2023-06-13_14-41-02.png",d="/blog/kayson/Snipaste_2023-06-13_14-42-06.png",k="/blog/kayson/Snipaste_2023-06-13_15-34-14.png",v={},m=s("h1",{id:"saas多租户",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#saas多租户","aria-hidden":"true"},"#"),n(" SaaS多租户")],-1),b=s("h2",{id:"_1-多租户是什么",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_1-多租户是什么","aria-hidden":"true"},"#"),n(" 1. 多租户是什么？")],-1),h=s("p",null,[n("多租户，简单来说是指"),s("strong",null,"一个"),n("业务系统，可以为"),s("strong",null,"多个"),n("组织服务，并且组织之间的数据是"),s("strong",null,"隔离"),n("的。")],-1),g={href:"https://gitee.com/jhzhou/kayson",target:"_blank",rel:"noopener noreferrer"},y=s("strong",null,"一个公司就是一个租户",-1),f=t('<h2 id="_2-数据隔离方案" tabindex="-1"><a class="header-anchor" href="#_2-数据隔离方案" aria-hidden="true">#</a> 2. 数据隔离方案</h2><p>多租户的数据隔离方案，可以分成分成三种：</p><ol><li>DATASOURCE 模式：独立数据库</li><li>SCHEMA 模式：共享数据库，独立 Schema</li><li>COLUMN 模式：共享数据库，共享 Schema，共享数据表</li></ol><h3 id="_2-1-datasource-模式" tabindex="-1"><a class="header-anchor" href="#_2-1-datasource-模式" aria-hidden="true">#</a> 2.1 DATASOURCE 模式</h3><p>一个租户一个数据库，这种方案的用户数据隔离级别最高，安全性最好，但成本也高。</p><p><img src="'+i+'" alt="Snipaste_2023-06-13_14-37-47"></p><ul><li>优点：为不同的租户提供独立的数据库，有助于简化数据模型的扩展设计，满足不同租户的独特需求；如果出现故障，恢复数据比较简单。</li><li>缺点：增大了数据库的安装数量，随之带来维护成本和购置成本的增加。</li></ul><h3 id="_2-2-schema-模式" tabindex="-1"><a class="header-anchor" href="#_2-2-schema-模式" aria-hidden="true">#</a> 2.2 SCHEMA 模式</h3><p>多个或所有租户共享数据库，但一个租户一个表。</p><p><img src="'+u+'" alt="Snipaste_2023-06-13_14-39-46"></p><ul><li>优点：为安全性要求较高的租户提供了一定程度的逻辑数据隔离，并不是完全隔离；每个数据库可以支持更多的租户数量。</li><li>缺点：如果出现故障，数据恢复比较困难，因为恢复数据库将牵扯到其他租户的数据； 如果需要跨租户统计数据，存在一定困难。</li></ul><h3 id="_2-3-column-模式" tabindex="-1"><a class="header-anchor" href="#_2-3-column-模式" aria-hidden="true">#</a> 2.3 COLUMN 模式</h3><p>共享数据库，共享数据架构。租户共享同一个数据库、同一个表，但在表中通过 <code>tenant_id</code> 字段区分租户的数据。这是共享程度最高、隔离级别最低的模式。</p><p><img src="'+r+'" alt="Snipaste_2023-06-13_14-41-02"></p><ul><li>优点：维护和购置成本最低，允许每个数据库支持的租户数量最多。</li><li>缺点：隔离级别最低，安全性最低，需要在设计开发时加大对安全的开发量；数据备份和恢复最困难，需要逐表逐条备份和还原。</li></ul><h3 id="_2-4-方案选择" tabindex="-1"><a class="header-anchor" href="#_2-4-方案选择" aria-hidden="true">#</a> 2.4 方案选择</h3><p><img src="'+d+'" alt="Snipaste_2023-06-13_14-42-06"></p><ul><li>一般情况下，可以考虑采用 COLUMN 模式，开发、运维简单，以最少的服务器为最多的租户提供服务。</li><li>租户规模比较大，或者一些租户对安全性要求较高，可以考虑采用 DATASOURCE 模式，当然它也相对复杂的多。</li><li>不推荐采用 SCHEMA 模式，因为它的优点并不明显，而且它的缺点也很明显，同时对复杂 SQL 支持一般。</li></ul><div class="custom-container tip"><p class="custom-container-title">kayson 项目采用 COLUMN 模式，为什么？</p><ul><li>维护成本低</li><li>性能足够满足</li></ul></div><div class="custom-container tip"><p class="custom-container-title">未来优化？</p><ul><li><p>小租户：基于 Sharding-Sphere 分库分表</p></li><li><p>大租户：独立数据库，甚至一个大租户是多个库 + 表（也分库分表）</p></li></ul></div><h2 id="_3-多租户的开关" tabindex="-1"><a class="header-anchor" href="#_3-多租户的开关" aria-hidden="true">#</a> 3. 多租户的开关</h2><p>系统有两个配置项，设置为 <code>true</code> 时开启多租户，设置为 <code>false</code> 时关闭多租户。</p><p>注意，两者需要保持一致，否则会报错！</p><table><thead><tr><th style="text-align:center;"><strong>配置项</strong></th><th style="text-align:center;"><strong>说明</strong></th></tr></thead><tbody><tr><td style="text-align:center;"><code>kayson.tenant.enable</code></td><td style="text-align:center;">后端多租户开关（yaml文件中）</td></tr><tr><td style="text-align:center;"><code>VUE_APP_TENANT_ENABLE</code></td><td style="text-align:center;">前端多租户开关（.env文件中）</td></tr></tbody></table><div class="custom-container tip"><p class="custom-container-title">疑问：为什么要设置两个配置项？</p><p>前端登录界面需要使用到多租户的配置项，从后端加载配置项的话，体验会比较差。</p></div><h2 id="_4-多租户的业务功能" tabindex="-1"><a class="header-anchor" href="#_4-多租户的业务功能" aria-hidden="true">#</a> 4. 多租户的业务功能</h2><p>多租户主要有两个业务功能：</p><ul><li>租户管理：配置系统租户，创建对应的租户管理员</li><li>租户套餐：配置租户套餐，自定每个租户的菜单、操作、按钮的权限</li></ul><h2 id="_5-多租户的技术组件" tabindex="-1"><a class="header-anchor" href="#_5-多租户的技术组件" aria-hidden="true">#</a> 5. 多租户的技术组件</h2>',29),w={href:"https://gitee.com/jhzhou/kayson/tree/master/kayson-framework/kayson-spring-boot-starter-biz-tenant",target:"_blank",rel:"noopener noreferrer"},_=s("h3",{id:"_5-1-租户上下文",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-1-租户上下文","aria-hidden":"true"},"#"),n(" 5.1 租户上下文")],-1),T={href:"https://gitee.com/jhzhou/kayson/blob/master/kayson-framework/kayson-spring-boot-starter-biz-tenant/src/main/java/cn/zjh/kayson/framework/tenant/core/context/TenantContextHolder.java",target:"_blank",rel:"noopener noreferrer"},I=t(`<p>通过调用 TenantContextHolder 的 <code>#getTenantId()</code> <strong>静态</strong>方法，获得当前的租户编号。绝绝绝大多数情况下，并不需要。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 多租户上下文 Holder
 * 
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TenantContextHolder</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 当前租户编号
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> <span class="token constant">TENANT_ID</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransmittableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 是否忽略租户
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">&gt;</span></span> <span class="token constant">IGNORE</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransmittableThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 获得租户编号。
     *
     * <span class="token keyword">@return</span> 租户编号
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">TENANT_ID</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 获得租户编号。如果不存在，则抛出 NullPointerException 异常
     *
     * <span class="token keyword">@return</span> 租户编号
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Long</span> <span class="token function">getRequiredTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Long</span> tenantId <span class="token operator">=</span> <span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tenantId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token string">&quot;TenantContextHolder 不存在租户编号!&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> tenantId<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setTenantId</span><span class="token punctuation">(</span><span class="token class-name">Long</span> tenantId<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">TENANT_ID</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>tenantId<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setIgnore</span><span class="token punctuation">(</span><span class="token class-name">Boolean</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">IGNORE</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>ignore<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 当前是否忽略租户
     *
     * <span class="token keyword">@return</span> 是否忽略
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">isIgnore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token constant">IGNORE</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token constant">TENANT_ID</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token constant">IGNORE</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2-web-层" tabindex="-1"><a class="header-anchor" href="#_5-2-web-层" aria-hidden="true">#</a> 5.2 Web 层</h3><p>具体实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 多租户 Context Web 过滤器
 * 将请求 Header 中的 tenant-id 解析出来，添加到 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">TenantContextHolder</span></span><span class="token punctuation">}</span> 中，这样后续的 DB 等操作，可以获得到租户编号。
 * 
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TenantContextWebFilter</span> <span class="token keyword">extends</span> <span class="token class-name">OncePerRequestFilter</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Long</span> tenantId <span class="token operator">=</span> <span class="token class-name">WebFrameworkUtils</span><span class="token punctuation">.</span><span class="token function">getTenantId</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tenantId <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">TenantContextHolder</span><span class="token punctuation">.</span><span class="token function">setTenantId</span><span class="token punctuation">(</span>tenantId<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token class-name">TenantContextHolder</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>默认情况下，前端的每个请求 Header <strong>必须</strong>带上 <code>tenant-id</code>，值为租户编号，即 <code>system_tenant</code> 表的主键编号。</p><p>如果不带该请求头，会报“租户的请求未传递，请进行排查”错误提示。</p><p>😜 通过 <code>kayson.tenant.ignore-urls</code> 配置项，可以设置哪些 URL 无需带该请求头。</p><h3 id="_5-3-security-层" tabindex="-1"><a class="header-anchor" href="#_5-3-security-层" aria-hidden="true">#</a> 5.3 Security 层</h3><p>主要是校验登录的用户，校验是否有权限访问该租户，避免越权问题。具体实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 多租户 Security Web 过滤器
 * 1.如果是登陆的用户，校验是否有权限访问该租户，避免越权问题。
 * 2.如果未登录，判断是否是忽略的 url
 *  2.1 是，若未传递租户编号，则默认忽略租户编号，避免报错
 *  2.2 不是，判断是否携带tenant_id，校验租户是合法，例如说被禁用、到期
 * 
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TenantSecurityWebFilter</span> <span class="token keyword">extends</span> <span class="token class-name">ApiRequestFilter</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TenantProperties</span> tenantProperties<span class="token punctuation">;</span>
    
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">GlobalExceptionHandler</span> globalExceptionHandler<span class="token punctuation">;</span>
    
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">AntPathMatcher</span> pathMatcher<span class="token punctuation">;</span>
    
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">TenantFrameworkService</span> tenantFrameworkService<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TenantSecurityWebFilter</span><span class="token punctuation">(</span><span class="token class-name">WebProperties</span> webProperties<span class="token punctuation">,</span>
                                   <span class="token class-name">TenantProperties</span> tenantProperties<span class="token punctuation">,</span>
                                   <span class="token class-name">GlobalExceptionHandler</span> globalExceptionHandler<span class="token punctuation">,</span>
                                   <span class="token class-name">TenantFrameworkService</span> tenantFrameworkService<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>webProperties<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tenantProperties <span class="token operator">=</span> tenantProperties<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>globalExceptionHandler <span class="token operator">=</span> globalExceptionHandler<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>pathMatcher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AntPathMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>tenantFrameworkService <span class="token operator">=</span> tenantFrameworkService<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doFilterInternal</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> response<span class="token punctuation">,</span> <span class="token class-name">FilterChain</span> filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Long</span> tenantId <span class="token operator">=</span> <span class="token class-name">TenantContextHolder</span><span class="token punctuation">.</span><span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">LoginUser</span> loginUser <span class="token operator">=</span> <span class="token class-name">SecurityFrameworkUtils</span><span class="token punctuation">.</span><span class="token function">getLoginUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token comment">// 1.如果是登陆的用户，校验是否有权限访问该租户，避免越权问题。</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>loginUser <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果获取不到租户编号，则尝试使用登陆用户的租户编号</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tenantId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                tenantId <span class="token operator">=</span> loginUser<span class="token punctuation">.</span><span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">TenantContextHolder</span><span class="token punctuation">.</span><span class="token function">setTenantId</span><span class="token punctuation">(</span>tenantId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果传递了租户编号，则进行比对租户编号，避免越权问题</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>loginUser<span class="token punctuation">.</span><span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> tenantId<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[doFilterInternal][租户({}) User({}/{}) 越权访问租户({}) URL({}/{})]&quot;</span><span class="token punctuation">,</span>
                        loginUser<span class="token punctuation">.</span><span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loginUser<span class="token punctuation">.</span><span class="token function">getUserType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token class-name">TenantContextHolder</span><span class="token punctuation">.</span><span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">writeJSON</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">GlobalErrorCodeConstants</span><span class="token punctuation">.</span><span class="token constant">FORBIDDEN</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token string">&quot;您无权访问该租户的数据&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 2.如果未登录，判断是否是忽略的 url</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isIgnoreUrl</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是允许忽略租户的 URL，若未传递租户编号，则默认忽略租户编号，避免报错</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tenantId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">TenantContextHolder</span><span class="token punctuation">.</span><span class="token function">setIgnore</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// 如果非允许忽略租户的 URL，则校验租户是否合法</span>
            <span class="token comment">// 如果请求未带租户的编号，不允许访问。</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>tenantId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;[doFilterInternal][URL({}/{}) 未传递租户编号]&quot;</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">writeJSON</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> <span class="token class-name">CommonResult</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token class-name">GlobalErrorCodeConstants</span><span class="token punctuation">.</span><span class="token constant">BAD_REQUEST</span><span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                        <span class="token string">&quot;请求的租户标识未传递，请进行排查&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 校验租户是合法，例如说被禁用、到期</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                tenantFrameworkService<span class="token punctuation">.</span><span class="token function">validateTenant</span><span class="token punctuation">(</span>tenantId<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">CommonResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> result <span class="token operator">=</span> globalExceptionHandler<span class="token punctuation">.</span><span class="token function">allExceptionHandler</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">ServletUtils</span><span class="token punctuation">.</span><span class="token function">writeJSON</span><span class="token punctuation">(</span>response<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 继续过滤</span>
        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isIgnoreUrl</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> request<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 快速匹配，保证性能</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>tenantProperties<span class="token punctuation">.</span><span class="token function">getIgnoreUrls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 逐个 Ant 路径匹配</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> url <span class="token operator">:</span> tenantProperties<span class="token punctuation">.</span><span class="token function">getIgnoreUrls</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>pathMatcher<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> request<span class="token punctuation">.</span><span class="token function">getRequestURI</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4-db-层" tabindex="-1"><a class="header-anchor" href="#_5-4-db-层" aria-hidden="true">#</a> 5.4 DB 层</h3>`,12),C={href:"https://baomidou.com/pages/aef2f2/",target:"_blank",rel:"noopener noreferrer"},R=t('<p>核心：每次对数据库操作时，它会<strong>自动</strong>拼接 <code>WHERE tenant_id = ?</code> 条件来进行租户的过滤，并且基本支持所有的 SQL 场景。</p><p>① <strong>需要</strong>开启多租户的表，必须添加 <code>tenant_id</code> 字段。例如说 <code>system_users</code>、<code>system_role</code> 等表。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>system_role<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n   <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;角色ID&#39;</span><span class="token punctuation">,</span>\n   <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">CHARACTER</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;角色名称&#39;</span><span class="token punctuation">,</span>\n   <span class="token identifier"><span class="token punctuation">`</span>tenant_id<span class="token punctuation">`</span></span> <span class="token keyword">bigint</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">DEFAULT</span> <span class="token string">&#39;0&#39;</span> <span class="token keyword">COMMENT</span> <span class="token string">&#39;租户编号&#39;</span><span class="token punctuation">,</span>\n   <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">1</span> <span class="token keyword">COMMENT</span><span class="token operator">=</span><span class="token string">&#39;角色信息表&#39;</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',3),j=s("code",null,"tenantId",-1),x={href:"https://gitee.com/jhzhou/kayson/blob/master/kayson-framework/kayson-spring-boot-starter-biz-tenant/src/main/java/cn/zjh/kayson/framework/tenant/core/db/TenantBaseDO.java",target:"_blank",rel:"noopener noreferrer"},S=t(`<p>② <strong>无需</strong>开启多租户的表，需要添加表名到 <code>kayson.tenant.ignore-tables</code> 配置项目。</p><p>如果不配置的话，MyBatis Plus 会自动拼接 <code>WHERE tenant_id = ?</code> 条件，导致报 <code>tenant_id</code> 字段不存在的错误。</p><p>具体实现如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 基于 MyBatis Plus 多租户的功能，实现 DB 层面的多租户的功能
 * 
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TenantDatabaseInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">TenantLineHandler</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ignoreTables <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TenantDatabaseInterceptor</span><span class="token punctuation">(</span><span class="token class-name">TenantProperties</span> properties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 不同 DB 下，大小写的习惯不同，所以需要都添加进去</span>
        properties<span class="token punctuation">.</span><span class="token function">getIgnoreTables</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>table <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            ignoreTables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            ignoreTables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>table<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 在 OracleKeyGenerator 中，生成主键时，会查询这个表，查询这个表后，会自动拼接 TENANT_ID 导致报错</span>
        ignoreTables<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">&quot;DUAL&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Expression</span> <span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">LongValue</span><span class="token punctuation">(</span><span class="token class-name">TenantContextHolder</span><span class="token punctuation">.</span><span class="token function">getRequiredTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">ignoreTable</span><span class="token punctuation">(</span><span class="token class-name">String</span> tableName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">TenantContextHolder</span><span class="token punctuation">.</span><span class="token function">isIgnore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// ① 全局忽略多租户</span>
                <span class="token operator">||</span> <span class="token class-name">CollUtil</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>ignoreTables<span class="token punctuation">,</span> tableName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ② 忽略多租户的表</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),E={href:"https://gitee.com/jhzhou/kayson/blob/master/kayson-framework/kayson-spring-boot-starter-biz-tenant/src/main/java/cn/zjh/kayson/framework/tenant/config/KaysonTenantAutoConfiguration.java",target:"_blank",rel:"noopener noreferrer"},U=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// DB</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">TenantLineInnerInterceptor</span> <span class="token function">tenantLineInnerInterceptor</span><span class="token punctuation">(</span><span class="token class-name">TenantProperties</span> properties<span class="token punctuation">,</span>
                                                             <span class="token class-name">MybatisPlusInterceptor</span> interceptor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">TenantLineInnerInterceptor</span> inner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TenantLineInnerInterceptor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TenantDatabaseInterceptor</span><span class="token punctuation">(</span>properties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 添加到 interceptor 中</span>
    <span class="token comment">// 需要加在首个，主要是为了在分页插件前面。这个是 MyBatis Plus 的规定</span>
    <span class="token class-name">MyBatisUtils</span><span class="token punctuation">.</span><span class="token function">addInterceptor</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">,</span> inner<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> inner<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-5-redis-层" tabindex="-1"><a class="header-anchor" href="#_5-5-redis-层" aria-hidden="true">#</a> 5.5 Redis 层</h3><p>由于 Redis 不同于 DB 有 <code>tenant_id</code> 字段，无法通过类似 <code>WHERE tenant_id</code> = ? 的方式过滤，所以需要通过在 Redis Key 上增加 <code>:t{tenantId}</code> 后缀的方式，进行租户之间的隔离。</p><p>例如说，假设 Redis Key 是 <code>user:%d</code>，示例是 <code>user:1024</code>；对应到多租户 1 的 Redis Key 是 <code>user:t1::1024</code>。</p><div class="custom-container tip"><p class="custom-container-title">为什么 Redis Key 要多租户隔离呢？</p><ul><li>① 在使用 DATASOURCE 模式时，不同库的相同表的 id 可能相同，例如说 A 库的用户，和 B 库的用户都是 1024，直接缓存会存在 Redis Key 的冲突。</li><li>② 在所有模式下，跨租户可能存在相同的需要唯一的数据，例如说用户的手机号，直接缓存会存在 Redis Key 的冲突。</li></ul></div><p><strong>基于 Spring Cache + Redis 实现</strong></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 多租户的 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">RedisCacheManager</span></span><span class="token punctuation">}</span> 实现类
 * 
 * 操作指定 name 的 <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">Cache</span></span><span class="token punctuation">}</span> 时，自动拼接租户后缀，格式为 name + &quot;:&quot; + tenantId + 后缀
 * 
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TenantRedisCacheManager</span> <span class="token keyword">extends</span> <span class="token class-name">RedisCacheManager</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">public</span> <span class="token class-name">TenantRedisCacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisCacheWriter</span> cacheWriter<span class="token punctuation">,</span> <span class="token class-name">RedisCacheConfiguration</span> defaultCacheConfiguration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span>cacheWriter<span class="token punctuation">,</span> defaultCacheConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">Cache</span> <span class="token function">getCache</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 如果开启多租户，则 name 拼接租户后缀</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">TenantContextHolder</span><span class="token punctuation">.</span><span class="token function">isIgnore</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">nonNull</span><span class="token punctuation">(</span><span class="token class-name">TenantContextHolder</span><span class="token punctuation">.</span><span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            name <span class="token operator">=</span> name <span class="token operator">+</span> <span class="token string">&quot;:&quot;</span> <span class="token operator">+</span> <span class="token class-name">TenantContextHolder</span><span class="token punctuation">.</span><span class="token function">getTenantId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        
        <span class="token comment">// 继续基于父方法</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getCache</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),L={href:"https://gitee.com/jhzhou/kayson/blob/master/kayson-framework/kayson-spring-boot-starter-biz-tenant/src/main/java/cn/zjh/kayson/framework/tenant/config/KaysonTenantAutoConfiguration.java",target:"_blank",rel:"noopener noreferrer"},M=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// Redis</span>
<span class="token annotation punctuation">@Bean</span>
<span class="token annotation punctuation">@Primary</span> <span class="token comment">// 引入租户时，tenantRedisCacheManager 为主 Bean</span>
<span class="token keyword">public</span> <span class="token class-name">RedisCacheManager</span> <span class="token function">tenantRedisCacheManager</span><span class="token punctuation">(</span><span class="token class-name">RedisTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> redisTemplate<span class="token punctuation">,</span>
                                                 <span class="token class-name">RedisCacheConfiguration</span> redisCacheConfiguration<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建 RedisCacheWriter 对象</span>
    <span class="token class-name">RedisConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">requireNonNull</span><span class="token punctuation">(</span>redisTemplate<span class="token punctuation">.</span><span class="token function">getConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">RedisCacheWriter</span> cacheWriter <span class="token operator">=</span> <span class="token class-name">RedisCacheWriter</span><span class="token punctuation">.</span><span class="token function">nonLockingRedisCacheWriter</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建 TenantRedisCacheManager 对象</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TenantRedisCacheManager</span><span class="token punctuation">(</span>cacheWriter<span class="token punctuation">,</span> redisCacheConfiguration<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>使用方式：</strong></p><p>在方法上添加 Spring Cache 注解，例如说 <code>@Cachable</code>、<code>@CachePut</code>、<code>@CacheEvict</code>。</p><p>注意！！！默认配置下，Spring Cache 都开启 Redis Key 的多租户隔离。如果不需要，可以将 Key 添加到 <code>kayson.tenant.ignore-cache</code> 配置项中。</p><h3 id="_5-6-aop" tabindex="-1"><a class="header-anchor" href="#_5-6-aop" aria-hidden="true">#</a> 5.6 AOP</h3><p>定义TenantIgnore注解</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 忽略租户，标记指定方法不进行租户的自动过滤
 *
 * 注意，只有 DB 的场景会过滤，其它场景暂时不过滤：
 * 1、Redis 场景：因为是基于 Key 实现多租户的能力，所以忽略没有意义，不像 DB 是一个 column 实现的
 * 2、MQ 场景：有点难以抉择，目前可以通过 Consumer 手动在消费的方法上，添加 @TenantIgnore 进行忽略
 *
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Target</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token class-name">ElementType</span><span class="token punctuation">.</span><span class="token constant">METHOD</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Retention</span><span class="token punctuation">(</span><span class="token class-name">RetentionPolicy</span><span class="token punctuation">.</span><span class="token constant">RUNTIME</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Inherited</span>
<span class="token keyword">public</span> <span class="token annotation punctuation">@interface</span> <span class="token class-name">TenantIgnore</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Aspect</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TenantIgnoreAspect</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;@annotation(tenantIgnore)&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">around</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">,</span> <span class="token class-name">TenantIgnore</span> tenantIgnore<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">Boolean</span> oldIgnore <span class="token operator">=</span> <span class="token class-name">TenantContextHolder</span><span class="token punctuation">.</span><span class="token function">isIgnore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">TenantContextHolder</span><span class="token punctuation">.</span><span class="token function">setIgnore</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 执行逻辑</span>
            <span class="token keyword">return</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
            <span class="token class-name">TenantContextHolder</span><span class="token punctuation">.</span><span class="token function">setIgnore</span><span class="token punctuation">(</span>oldIgnore<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>① 声明 <code>@TenantIgnore</code> 注解在方法上，标记指定方法不进行租户的自动过滤，避免<strong>自动</strong>拼接 <code>WHERE tenant_id = ?</code> 条件等等。</p>`,9),N={href:"https://gitee.com/jhzhou/kayson/blob/master/kayson-module-system/kayson-module-system-biz/src/main/java/cn/zjh/kayson/module/system/service/permission/RoleServiceImpl.java",target:"_blank",rel:"noopener noreferrer"},q=s("code",null,"#initLocalCache()",-1),H=s("strong",null,"所有",-1),O=s("code",null,"@TenantIgnore",-1),A=t(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// RoleServiceImpl.java</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RoleServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">RoleService</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token annotation punctuation">@Lazy</span> <span class="token comment">// 注入自己，所以延迟加载</span>
    <span class="token keyword">private</span> <span class="token class-name">RoleService</span> self<span class="token punctuation">;</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token annotation punctuation">@PostConstruct</span>
    <span class="token annotation punctuation">@TenantIgnore</span> <span class="token comment">// 忽略自动多租户，全局初始化缓存</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// ... 从数据库中，加载角色</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>fixedDelay <span class="token operator">=</span> <span class="token constant">SCHEDULER_PERIOD</span><span class="token punctuation">,</span> initialDelay <span class="token operator">=</span> <span class="token constant">SCHEDULER_PERIOD</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">schedulePeriodicRefresh</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        self<span class="token punctuation">.</span><span class="token function">initLocalCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &lt;x&gt; 通过 self 引用到 Spring 代理对象</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>有一点要格外注意，由于 <code>@TenantIgnore</code> 注解是基于 Spring AOP 实现，如果是<strong>方法内部的调用</strong>，避免使用 <code>this</code> 导致不生效，可以采用上述示例的 <code>&lt;x&gt;</code> 处的 <code>self</code> 方式。</p>`,2),P={href:"https://gitee.com/jhzhou/kayson/blob/master/kayson-framework/kayson-spring-boot-starter-biz-tenant/src/main/java/cn/zjh/kayson/framework/tenant/core/util/TenantUtils.java",target:"_blank",rel:"noopener noreferrer"},z=s("code",null,"#execute(Long tenantId, Runnable runnable)",-1),D=s("code",null,"tenantId",-1),B=s("code",null,"runnable",-1),F={href:"https://gitee.com/jhzhou/kayson/blob/master/kayson-module-system/kayson-module-system-biz/src/main/java/cn/zjh/kayson/module/system/service/tenant/TenantServiceImpl.java",target:"_blank",rel:"noopener noreferrer"},W=s("code",null,"#createTenant(...)",-1),K=s("p",null,[s("img",{src:k,alt:"Snipaste_2023-06-13_15-34-14"})],-1),G=s("h3",{id:"_5-7-job",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-7-job","aria-hidden":"true"},"#"),n(" 5.7 Job")],-1),Q={href:"https://gitee.com/jhzhou/kayson/tree/master/kayson-framework/kayson-spring-boot-starter-biz-tenant/src/main/java/cn/zjh/kayson/framework/tenant/core/job",target:"_blank",rel:"noopener noreferrer"},J=s("code",null,"@TenantJob",-1),V=s("strong",null,"并行",-1),Y=s("h3",{id:"_5-8-mq",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-8-mq","aria-hidden":"true"},"#"),n(" 5.8 MQ")],-1),X={href:"https://gitee.com/jhzhou/kayson/tree/master/kayson-framework/kayson-spring-boot-starter-biz-tenant/src/main/java/cn/zjh/kayson/framework/tenant/core/mq",target:"_blank",rel:"noopener noreferrer"},Z=s("p",null,"通过租户对 MQ 层面的封装，实现租户上下文，可以继续传递到 MQ 消费的逻辑中，避免丢失的问题。实现原理是：",-1),$=s("ul",null,[s("li",null,[n("发送消息时，MQ 会将租户上下文的租户编号，记录到 Message 消息头 "),s("code",null,"tenant-id"),n(" 上。")]),s("li",null,[n("消费消息时，MQ 会将 Message 消息头 "),s("code",null,"tenant-id"),n("，设置到租户上下文的租户编号。")])],-1),nn=s("h3",{id:"_5-9-async",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#_5-9-async","aria-hidden":"true"},"#"),n(" 5.9 Async")],-1),sn={href:"https://gitee.com/jhzhou/kayson/blob/master/kayson-framework/kayson-spring-boot-starter-job/src/main/java/cn/zjh/kayson/framework/quartz/config/KaysonAsyncAutoConfiguration.java",target:"_blank",rel:"noopener noreferrer"},an=s("p",null,"第一步，TenantContextHolder 使用 TransmittableThreadLocal。",-1),en=s("p",null,"第二步，将 Runnable 包装成 TtlRunnable",-1),tn={href:"https://github.com/alibaba/transmittable-thread-local",target:"_blank",rel:"noopener noreferrer"},pn=t(`<h2 id="_6-多租户的业务功能" tabindex="-1"><a class="header-anchor" href="#_6-多租户的业务功能" aria-hidden="true">#</a> 6.多租户的业务功能</h2><h3 id="_6-1多租户的管理" tabindex="-1"><a class="header-anchor" href="#_6-1多租户的管理" aria-hidden="true">#</a> 6.1多租户的管理</h3><p>菜单：系统管理 -&gt; 租户管理 -&gt; 租户列表</p><p>表结构 system_tenant</p><ul><li><p>contact_user_id</p><ul><li>指向 AdminUserDO</li><li>拥有角色：租户管理员(code = tenant_admin)</li></ul></li><li><p>有效性：status、expireTime</p></li><li><p>配额</p><ul><li>package_id</li><li>accountCount</li></ul></li></ul><p>代码实现</p><ul><li>前端：/views/system/tenant/index.vue</li><li>后端：TenantController =&gt; TenantService =&gt; TenantMapper = &gt; TenantDO</li></ul><p>关键功能</p><ul><li>创建租户 <ul><li>初始化租户 Role 以权限</li><li>初始化租户 AdminUser</li></ul></li><li>更新租户：更新租户 Role 的权限</li></ul><p>TenantInfoHandler</p><ul><li>目的：减少多租户的逻辑耦合（开关、上下文），专注完成自动以的逻辑</li><li>案例：创建用户时，超过最大账户配额</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 租户信息处理
 * 目的：尽量减少租户逻辑耦合到系统中
 * 
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TenantInfoHandler</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 基于传入的租户信息，进行相关逻辑的执行
     * 例如说，创建用户时，超过最大账户配额
     *
     * <span class="token keyword">@param</span> <span class="token parameter">tenant</span> 租户信息
     */</span>
    <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">TenantDO</span> tenant<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2多租户的套餐" tabindex="-1"><a class="header-anchor" href="#_6-2多租户的套餐" aria-hidden="true">#</a> 6.2多租户的套餐</h3><p>菜单：系统管理 -&gt; 租户管理 -&gt; 租户套餐</p><p>表结构 system_tenant_package</p><ul><li>菜单编号数组 menuIds</li></ul><p>代码实现</p><ul><li>前端：/views/system/tenantPackage/index.vue</li><li>后端：TenantPackageController =&gt; TenantPackageService =&gt; TenantPackageMapper = &gt; TenantPackageDO</li></ul><p>关键功能 - 如何将租户的套餐，同步到对应的角色权限</p><ul><li>场景一：创建租户时的同步</li><li>场景二：更新租户套餐时的同步</li><li>场景三：更新租户套餐的菜单时的同步</li></ul><p>TenantMenuHandler</p><ul><li>目的：减少多租户的逻辑耦合（开关、上下文），专注完成自动以的逻辑</li><li>案例：分配角色菜单时，过滤掉非租户套餐的菜单</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 租户菜单处理
 * 目的：尽量减少租户逻辑耦合到系统中
 * 
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TenantMenuHandler</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 基于传入的租户菜单【全】列表，进行相关逻辑的执行
     * 例如说，返回可分配菜单的时候，可以移除多余的
     *
     * <span class="token keyword">@param</span> <span class="token parameter">menuIds</span> 菜单列表
     */</span>
    <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">&gt;</span></span> menuIds<span class="token punctuation">)</span><span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,23);function on(cn,ln){const a=o("ExternalLinkIcon");return c(),l("div",null,[m,b,h,s("p",null,[n("例如说，在服务上部署了一个 "),s("a",g,[n("kayson"),e(a)]),n(" 系统，可以支持多个不同的公司使用。这里的"),y,n("，每个用户必然属于某个租户。因此，用户也只能看见自己租户下面的内容，其它租户的内容对他是不可见的。")]),f,s("p",null,[n("技术组件 "),s("a",w,[n("kayson-spring-boot-starter-biz-tenant"),e(a)]),n(" ，实现透明化的多租户能力，针对 Web、Security、DB、Redis、AOP、Job、MQ、Async 等多个层面进行封装。")]),_,s("p",null,[s("a",T,[n("TenantContextHolder"),e(a)]),n(" 是租户上下文，通过 ThreadLocal 实现租户编号的共享与传递。")]),I,s("p",null,[n("COLUMN 模式，基于 MyBatis Plus 自带的"),s("a",C,[n("多租户 "),e(a)]),n("功能实现。")]),R,s("p",null,[n("并且该表对应的 DO 需要使用到 "),j,n(" 属性时，建议继承 "),s("a",x,[n("TenantBaseDO"),e(a)]),n(" 类。")]),S,s("p",null,[n("在 "),s("a",E,[n("KaysonTenantAutoConfiguration"),e(a)]),n(" 自动配置中注册多租户插件 TenantLineInnerInterceptor Bean对象。")]),U,s("p",null,[n("在 "),s("a",L,[n("KaysonTenantAutoConfiguration"),e(a)]),n(" 自动配置中注册tenantRedisCacheManager 为主 Bean。")]),M,s("p",null,[n("例如说："),s("a",N,[n("RoleServiceImpl"),e(a)]),n(" 的 "),q,n("方法，加载"),H,n("租户的角色到内存进行缓存，如果不声明 "),O,n(" 注解，会导致租户的自动过滤，只加载了某个租户的角色。")]),A,s("p",null,[n("② 使用 "),s("a",P,[n("TenantUtils"),e(a)]),n(" 的 "),z,n(" 方法，模拟指定租户( "),D,n(" )，执行某段业务逻辑( "),B,n(" )。")]),s("p",null,[n("例如说：在 "),s("a",F,[n("TenantServiceImpl"),e(a)]),n(" 的 "),W,n(" 方法，在创建完租户时，需要模拟该租户，进行用户和角色的创建。如下图所示：")]),K,G,s("p",null,[n("实现可见 "),s("a",Q,[n("job"),e(a)]),n(" 包。声明 "),J,n("注解在 Job 类上，实现"),V,n("遍历每个租户，执行定时任务的逻辑。")]),Y,s("p",null,[n("实现可见 "),s("a",X,[n("mq"),e(a)]),n(" 包。")]),Z,$,nn,s("p",null,[n("实现可见 "),s("a",sn,[n("KaysonAsyncAutoConfiguration"),e(a)]),n(" 类。")]),an,en,s("p",null,[n("通过使用阿里开源的 "),s("a",tn,[n("TransmittableThreadLocal "),e(a)]),n("组件，实现 Spring Async 执行异步逻辑时，租户上下文可以继续传递，避免丢失的问题。")]),pn])}const rn=p(v,[["render",on],["__file","SaaS多租户.html.vue"]]);export{rn as default};
