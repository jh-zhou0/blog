import{_ as s,o as h,c as t,a,d as e}from"./app-66d6b4fd.js";const n={},l=a("h1",{id:"java7和java8的hashmap",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#java7和java8的hashmap","aria-hidden":"true"},"#"),e(" Java7和Java8的HashMap")],-1),o=a("ul",null,[a("li",null,[a("p",null,"JDK7 HashMap 结构为数组+链表（发生元素碰撞时，会将新元素添加到链表开头）")]),a("li",null,[a("p",null,"JDK8 HashMap 结构为数组+链表+红黑树（发生元素碰撞时，会将新元素添加到链表末尾， 当 HashMap 总容量大于等于 64，并且某个链表的大小大于等于 8，会将链表转化为红黑树 （注意：红黑树是二叉树的一种））")])],-1),d=a("h2",{id:"jdk8-hashmap重排序",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#jdk8-hashmap重排序","aria-hidden":"true"},"#"),e(" JDK8 HashMap重排序")],-1),_=a("p",null,"如果删除了 HashMap 中红黑树的某个元素导致元素重排序时，不需要计算待重排序的元素的 HashCode 码，只需要将当前元素放到（HashMap 总长度+当前元素在 HashMap 中的位置）的位置 即可。",-1),c=[l,o,d,_];function r(p,i){return h(),t("div",null,c)}const v=s(n,[["render",r],["__file","6-Java7和Java8的HashMap.html.vue"]]);export{v as default};
