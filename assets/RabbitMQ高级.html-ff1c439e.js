import{_ as l,r as o,o as u,c as r,a as s,d as n,b as a,w as i,e}from"./app-66d6b4fd.js";const d="/blog/mq/rabbitmq/Snipaste_2023-06-20_14-19-05.png",k="/blog/mq/rabbitmq/Snipaste_2023-06-20_14-31-14.png",m="/blog/mq/rabbitmq/Snipaste_2023-06-20_15-30-41.png",v="/blog/mq/rabbitmq/Snipaste_2023-06-20_15-33-56.png",b="/blog/mq/rabbitmq/Snipaste_2023-06-20_15-36-31.png",g="/blog/mq/rabbitmq/Snipaste_2023-06-20_15-44-01.png",h="/blog/mq/rabbitmq/Snipaste_2023-06-20_15-45-31.png",q="/blog/mq/rabbitmq/Snipaste_2023-06-20_15-56-48.png",y="/blog/mq/rabbitmq/Snipaste_2023-06-20_16-32-04.png",_="/blog/mq/rabbitmq/Snipaste_2023-06-20_16-32-12.png",f="/blog/mq/rabbitmq/Snipaste_2023-06-20_16-04-00.png",x="/blog/mq/rabbitmq/Snipaste_2023-06-20_16-15-53.png",w="/blog/mq/rabbitmq/Snipaste_2023-06-20_16-57-19.png",S="/blog/mq/rabbitmq/Snipaste_2023-06-20_16-57-47.png",Q="/blog/mq/rabbitmq/Snipaste_2023-06-20_18-30-49.png",R="/blog/mq/rabbitmq/Snipaste_2023-06-20_18-31-58.png",c="/blog/mq/rabbitmq/Snipaste_2023-06-20_18-33-07.png",M="/blog/mq/rabbitmq/Snipaste_2023-06-20_18-34-10.png",j="/blog/mq/rabbitmq/Snipaste_2023-06-20_19-27-21.png",T="/blog/mq/rabbitmq/Snipaste_2023-06-20_19-29-38.png",D="/blog/mq/rabbitmq/Snipaste_2023-06-20_19-41-12.png",C="/blog/mq/rabbitmq/Snipaste_2023-06-20_19-41-32.png",B="/blog/mq/rabbitmq/Snipaste_2023-06-20_19-46-00.png",E="/blog/mq/rabbitmq/Snipaste_2023-06-20_19-46-20.png",z="/blog/mq/rabbitmq/Snipaste_2023-06-20_20-15-38.png",A="/blog/mq/rabbitmq/Snipaste_2023-06-20_20-34-00.png",L="/blog/mq/rabbitmq/Snipaste_2023-06-20_20-44-10.png",I="/blog/mq/rabbitmq/Snipaste_2023-06-20_21-26-56.png",N="/blog/mq/rabbitmq/Snipaste_2023-06-20_21-27-18.png",U="/blog/mq/rabbitmq/Snipaste_2023-06-20_21-35-47.png",P="/blog/mq/rabbitmq/Snipaste_2023-06-21_10-21-06.png",K="/blog/mq/rabbitmq/Snipaste_2023-06-21_10-21-26.png",O="/blog/mq/rabbitmq/Snipaste_2023-06-21_10-21-45.png",F="/blog/mq/rabbitmq/Snipaste_2023-06-21_10-32-00.png",V="/blog/mq/rabbitmq/Snipaste_2023-06-21_10-34-27.png",H={},$=e('<h1 id="rabbitmq高级" tabindex="-1"><a class="header-anchor" href="#rabbitmq高级" aria-hidden="true">#</a> RabbitMQ高级</h1><p>消息队列在使用过程中，面临着很多实际问题需要思考：</p><ul><li>消息可靠性 <ul><li>如何确保发送的消息至少被消费一次</li></ul></li><li>延迟消息 <ul><li>如何实现消息的延迟投递</li></ul></li><li>消息堆积 <ul><li>如何解决数百万消息的堆积，无法及时消费的问题</li></ul></li><li>高可用 <ul><li>如何避免单点的MQ故障而导致的不可用问题</li></ul></li></ul><h2 id="_0-代码" tabindex="-1"><a class="header-anchor" href="#_0-代码" aria-hidden="true">#</a> 0.代码</h2>',4),G={href:"https://gitee.com/jhzhou/springboot-labs/tree/master/lab-13-rabbitmq",target:"_blank",rel:"noopener noreferrer"},J=e('<h2 id="_1-消息可靠性" tabindex="-1"><a class="header-anchor" href="#_1-消息可靠性" aria-hidden="true">#</a> 1.消息可靠性</h2><p>消息从发送，到消费者接收，会经理多个过程：</p><p><img src="'+d+'" alt="Snipaste_2023-06-20_14-19-05"></p><p>其中的每一步都可能导致消息丢失，常见的丢失原因包括：</p><ul><li>发送时丢失： <ul><li>生产者发送的消息未送达exchange</li><li>消息到达exchange后未到达queue</li></ul></li><li>MQ宕机，queue将消息丢失</li><li>consumer接收到消息后未消费就宕机</li></ul><p>针对这些问题，RabbitMQ分别给出了解决方案：</p><ul><li>生产者确认机制</li><li>mq持久化</li><li>消费者确认机制</li><li>失败重试机制</li></ul><h3 id="_1-1-生产者消息确认" tabindex="-1"><a class="header-anchor" href="#_1-1-生产者消息确认" aria-hidden="true">#</a> 1.1.生产者消息确认</h3><p>RabbitMQ提供了publisher confirm机制来避免消息发送到MQ过程中丢失。这种机制必须给每个消息指定一个唯一ID。消息发送到MQ以后，会返回一个结果给发送者，表示消息是否处理成功。</p><p>返回结果有两种方式：</p><ul><li>publisher-confirm，发送者确认 <ul><li>消息成功投递到交换机，返回ack</li><li>消息未投递到交换机，返回nack</li></ul></li><li>publisher-return，发送者回执 <ul><li>消息投递到交换机了，但是没有路由到队列。返回ACK，及路由失败原因。</li></ul></li></ul><p><img src="'+k+`" alt="Snipaste_2023-06-20_14-31-14"></p><div class="custom-container tip"><p class="custom-container-title">注意</p><p>确认机制发送消息时，需要给每个消息设置一个全局唯一id，以区分不同的消息，避免ack冲突。</p></div><h4 id="修改配置" tabindex="-1"><a class="header-anchor" href="#修改配置" aria-hidden="true">#</a> 修改配置</h4><p>首先，修改publisher服务中的application.yml文件，添加下面的内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">publisher-confirm-type</span><span class="token punctuation">:</span> correlated
    <span class="token key atrule">publisher-returns</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
    <span class="token key atrule">template</span><span class="token punctuation">:</span>
      <span class="token key atrule">mandatory</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>publish-confirm-type</code>：开启publisher-confirm，这里支持两种类型： <ul><li><code>simple</code>：同步等待confirm结果，直到超时</li><li><code>correlated</code>：异步回调，定义ConfirmCallback，MQ返回结果时会回调这个ConfirmCallback</li></ul></li><li><code>publish-returns</code>：开启publish-return功能，同样是基于callback机制，不过是定义ReturnCallback</li><li><code>template.mandatory</code>：定义消息路由失败时的策略。true，则调用ReturnCallback；false：则直接丢弃消息</li></ul><h4 id="定义returncallback" tabindex="-1"><a class="header-anchor" href="#定义returncallback" aria-hidden="true">#</a> 定义ReturnCallback</h4><p>每个RabbitTemplate只能配置一个ReturnCallback，因此需要在项目加载时配置，添加代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonConfig</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取RabbitTemplate</span>
        <span class="token class-name">RabbitTemplate</span> rabbitTemplate <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">RabbitTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置ReturnCallback</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> replyCode<span class="token punctuation">,</span> replyText<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 投递失败，记录日志</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送失败，应答码{}，原因{}，交换机{}，路由键{},消息{}&quot;</span><span class="token punctuation">,</span>
                    replyCode<span class="token punctuation">,</span> replyText<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果有业务需要，可以重发消息</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="定义confirmcallback" tabindex="-1"><a class="header-anchor" href="#定义confirmcallback" aria-hidden="true">#</a> 定义ConfirmCallback</h4><p>ConfirmCallback 可以在发送消息时指定，因为每个业务处理confirm成功或失败的逻辑不一定相同。</p><p>在publisher服务的 com.kayson.springboot.lab13.rabbitmq.advanced.SpringAmqpTest 类中，定义一个单元测试方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringAmqpTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendMessage2SimpleQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.消息体</span>
        <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;hello, spring amqp!&quot;</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.全局唯一的消息ID，需要封装到CorrelationData中</span>
        <span class="token class-name">CorrelationData</span> correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3.添加callback</span>
        correlationData<span class="token punctuation">.</span><span class="token function">getFuture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>result <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isAck</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 3.1.ack，消息成功</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息成功投递到交换机！消息ID: {}&quot;</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 3.2.nack，消息失败</span>
                    log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消息投递交换机失败！消息ID:{}, 原因{}&quot;</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">getReason</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            ex <span class="token operator">-&gt;</span> log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送异常, ID:{}, 原因{}&quot;</span><span class="token punctuation">,</span> correlationData<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 4.发送消息</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;simple.queue&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 休眠一会儿，等待ack回执</span>
        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>“”：默认交换机</li><li>“simple.queue”：已存在的queue</li></ul><h4 id="测试" tabindex="-1"><a class="header-anchor" href="#测试" aria-hidden="true">#</a> 测试</h4><p>① 测试 ack，代码如上，执行 testSendMessage2SimpleQueue() 方法，结果如下；</p><p><img src="`+m+'" alt="Snipaste_2023-06-20_15-30-41"></p><p>② 测试 publish-return，修改 “simple.queue” ---&gt; &quot;non.queue&quot;（已存在的交换机），结果如下：</p><p><img src="'+v+'" alt="Snipaste_2023-06-20_15-33-56"></p><p>③ 测试 nack，代码如上，修改 “” ---&gt; &quot;non.exchange&quot;（不存在的交换机），执行 testSendMessage2SimpleQueue() 方法，结果如下：</p><p><img src="'+b+`" alt="Snipaste_2023-06-20_15-36-31"></p><h3 id="_1-2消息持久化" tabindex="-1"><a class="header-anchor" href="#_1-2消息持久化" aria-hidden="true">#</a> 1.2消息持久化</h3><p>生产者确认可以确保消息投递到RabbitMQ的队列中，但是消息发送到RabbitMQ以后，如果突然宕机，也可能导致消息丢失。</p><p>要想确保消息在RabbitMQ中安全保存，必须开启消息持久化机制。</p><ul><li>交换机持久化</li><li>队列持久化</li><li>消息持久化</li></ul><h4 id="交换机持久化" tabindex="-1"><a class="header-anchor" href="#交换机持久化" aria-hidden="true">#</a> 交换机持久化</h4><p>RabbitMQ中交换机默认是非持久化的，mq重启后就丢失。</p><p>SpringAMQP中可以通过代码指定交换机持久化：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">simpleExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 三个参数：交换机名称、是否持久化、当没有queue与其绑定时是否自动删除</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;simple.direct&quot;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">注意</p><p>默认情况下，由SpringAMQP声明的交换机都是持久化的。</p><p>可以在RabbitMQ控制台看到持久化的交换机都会带上<code>D</code>的标示：</p><p><img src="`+g+`" alt="Snipaste_2023-06-20_15-44-01"></p></div><h4 id="队列持久化" tabindex="-1"><a class="header-anchor" href="#队列持久化" aria-hidden="true">#</a> 队列持久化</h4><p>RabbitMQ中队列默认是非持久化的，mq重启后就丢失。</p><p>SpringAMQP中可以通过代码指定交换机持久化：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Bean</span>
<span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">simpleQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 使用QueueBuilder构建队列，durable就是持久化的</span>
    <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">&quot;simple.queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="custom-container tip"><p class="custom-container-title">注意</p><p>默认情况下，由SpringAMQP声明的队列都是持久化的。</p><p>可以在RabbitMQ控制台看到持久化的队列都会带上<code>D</code>的标示：</p><p><img src="`+h+'" alt="Snipaste_2023-06-20_15-45-31"></p></div><h4 id="消息持久化" tabindex="-1"><a class="header-anchor" href="#消息持久化" aria-hidden="true">#</a> 消息持久化</h4><p>利用SpringAMQP发送消息时，可以设置消息的属性（MessageProperties），指定delivery-mode：</p><ul><li>1：非持久化</li><li>2：持久化</li></ul><p><img src="'+q+`" alt="Snipaste_2023-06-20_15-56-48"></p><div class="custom-container tip"><p class="custom-container-title">注意</p><p>默认情况下，SpringAMQP发出的任何消息都是持久化的，不用特意指定。</p></div><h3 id="_1-3消费者消息确认" tabindex="-1"><a class="header-anchor" href="#_1-3消费者消息确认" aria-hidden="true">#</a> 1.3消费者消息确认</h3><p>RabbitMQ是<strong>阅后即焚</strong>机制，RabbitMQ确认消息被消费者消费后会立刻删除。</p><p>而RabbitMQ是通过消费者回执来确认消费者是否成功处理消息的：消费者获取消息后，应该向RabbitMQ发送ACK回执，表明自己已经处理消息。</p><p>设想这样的场景：</p><ol><li>RabbitMQ投递消息给消费者</li><li>消费者获取消息后，返回ACK给RabbitMQ</li><li>RabbitMQ删除消息</li><li>消费者宕机，消息尚未处理</li></ol><p>这样，消息就丢失了。因此消费者返回ACK的时机非常重要。</p><p>而SpringAMQP则允许配置三种确认模式：</p><ul><li><p>manual：手动ack，需要在业务代码结束后，调用api发送ack。</p></li><li><p>auto：自动ack，由spring监测listener代码是否出现异常，没有异常则返回ack；抛出异常则返回nack</p></li><li><p>none：关闭ack，MQ假定消费者获取消息后会成功处理，因此消息投递后立即被删除</p></li></ul><p>由此可知：</p><ul><li>none模式下，消息投递是不可靠的，可能丢失</li><li>auto模式类似事务机制，出现异常时返回nack，消息回滚到mq；没有异常，返回ack</li><li>manual：自己根据业务情况，判断什么时候该ack</li></ul><p>一般，我们都是使用默认的auto即可。</p><p>可通过 application.yaml 指定使用的消费者确认模式：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token key atrule">simple</span><span class="token punctuation">:</span>
        <span class="token key atrule">acknowledge-mode</span><span class="token punctuation">:</span> none <span class="token comment"># 关闭ack</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试auto" tabindex="-1"><a class="header-anchor" href="#测试auto" aria-hidden="true">#</a> 测试auto</h4><p>修改consumer服务的SpringRabbitListener类中的方法，模拟一个消息处理异常：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringRabbitListener</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span><span class="token string">&quot;simple.queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenSimpleQueue</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消费者接收到simple.queue的消息：【{}】&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 模拟异常</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;消息处理完成！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在publisher服务的 com.kayson.springboot.lab13.rabbitmq.advanced.SpringAmqpTest 类中，新增一个单元测试方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSimpleQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 队列名称</span>
    <span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">&quot;simple.queue&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 消息</span>
    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;hello, spring amqp!&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送消息</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在异常位置打断点，再次发送消息，程序卡在断点时，可以发现此时消息状态为unack（未确定状态）：</p><p><img src="`+y+'" alt="Snipaste_2023-06-20_16-32-04"></p><p>抛出异常后，因为Spring会自动返回nack，所以消息恢复至Ready状态，并且没有被RabbitMQ删除：</p><p><img src="'+_+'" alt="Snipaste_2023-06-20_16-32-12"></p><h3 id="_1-4消费失败重试机制" tabindex="-1"><a class="header-anchor" href="#_1-4消费失败重试机制" aria-hidden="true">#</a> 1.4消费失败重试机制</h3><p>当消费者出现异常后，消息会不断requeue（重入队）到队列，再重新发送给消费者，然后再次异常，再次requeue，无限循环，导致mq的消息处理飙升，带来不必要的压力：</p><p><img src="'+f+`" alt="Snipaste_2023-06-20_16-04-00"></p><p>怎么办呢？</p><h4 id="方案一-本地重试" tabindex="-1"><a class="header-anchor" href="#方案一-本地重试" aria-hidden="true">#</a> 方案一：本地重试</h4><p>我们可以利用Spring的retry机制，在消费者出现异常时利用本地重试，而不是无限制的requeue到mq队列。</p><p>修改consumer服务的application.yml文件，添加内容：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">listener</span><span class="token punctuation">:</span>
      <span class="token key atrule">simple</span><span class="token punctuation">:</span>
        <span class="token key atrule">retry</span><span class="token punctuation">:</span>
          <span class="token key atrule">enabled</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 开启消费者失败重试</span>
          <span class="token key atrule">initial-interval</span><span class="token punctuation">:</span> <span class="token number">1000</span> <span class="token comment"># 初识的失败等待时长为1秒</span>
          <span class="token key atrule">multiplier</span><span class="token punctuation">:</span> <span class="token number">1</span> <span class="token comment"># 失败的等待时长倍数，下次等待时长 = multiplier * last-interval</span>
          <span class="token key atrule">max-attempts</span><span class="token punctuation">:</span> <span class="token number">3</span> <span class="token comment"># 最大重试次数</span>
          <span class="token key atrule">stateless</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># true无状态；false有状态。如果业务中包含事务，这里改为false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启consumer服务，重复之前的测试。可以发现：</p><ul><li>在重试3次后，SpringAMQP会抛出异常 AmqpRejectAndDontRequeueException，说明本地重试触发了</li><li>查看RabbitMQ控制台，发现消息被删除了，说明最后SpringAMQP返回的是ack，mq删除消息了</li></ul><p><img src="`+x+`" alt="Snipaste_2023-06-20_16-15-53"></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Caused by: org.springframework.amqp.AmqpRejectAndDontRequeueException: null
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>结论：</p><ul><li>开启本地重试时，消息处理过程中抛出异常，不会requeue到队列，而是在消费者本地重试</li><li>重试达到最大次数后，Spring会返回ack，消息会被丢弃</li></ul><h4 id="方案二-失败策略" tabindex="-1"><a class="header-anchor" href="#方案二-失败策略" aria-hidden="true">#</a> 方案二：失败策略</h4><p>在之前的测试中，达到最大重试次数后，消息会被丢弃，这是由Spring内部机制决定的。</p><p>在开启重试模式后，重试次数耗尽，如果消息依然失败，则需要有MessageRecovery接口来处理，它包含三种不同的实现：</p><ul><li><p>RejectAndDontRequeueRecoverer：重试耗尽后，直接reject，丢弃消息。默认就是这种方式</p></li><li><p>ImmediateRequeueMessageRecoverer：重试耗尽后，返回nack，消息重新入队</p></li><li><p>RepublishMessageRecoverer：重试耗尽后，将失败消息投递到指定的交换机</p></li></ul><p>比较优雅的一种处理方案是RepublishMessageRecoverer，失败后将消息投递到一个指定的，专门存放异常消息的队列，后续由人工集中处理。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorMessageConfig</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">errorMessageExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;error.direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">errorMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;error.queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">errorMessageBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">errorMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">errorMessageExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">MessageRecoverer</span> <span class="token function">republishMessageRecoverer</span><span class="token punctuation">(</span><span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RepublishMessageRecoverer</span><span class="token punctuation">(</span>rabbitTemplate<span class="token punctuation">,</span> <span class="token string">&quot;error.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;error&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试-1" tabindex="-1"><a class="header-anchor" href="#测试-1" aria-hidden="true">#</a> 测试</h4><p>重新启动consumer服务，执行 testSimpleQueue() 方法，结果如下：</p><p><img src="`+w+'" alt="Snipaste_2023-06-20_16-57-19"></p><p>重试三次过后，投递到 error.queue中</p><p><img src="'+S+'" alt=""></p><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h3><p>如何确保RabbitMQ消息的可靠性？</p><ul><li>开启生产者确认机制，确保生产者的消息能到达队列</li><li>开启持久化功能，确保消息未消费前在队列中不会丢失</li><li>开启消费者确认机制为auto，由spring确认消息处理成功后完成ack</li><li>开启消费者失败重试机制，并设置MessageRecoverer，多次重试失败后将消息投递到异常交换机，交由人工处理</li></ul><h2 id="_2-死信交换机" tabindex="-1"><a class="header-anchor" href="#_2-死信交换机" aria-hidden="true">#</a> 2.死信交换机</h2><h3 id="_2-1什么是死信交换机" tabindex="-1"><a class="header-anchor" href="#_2-1什么是死信交换机" aria-hidden="true">#</a> 2.1什么是死信交换机</h3><p>什么是死信？</p><p>当一个队列中的消息满足下列情况之一时，可以成为死信（dead letter）：</p><ul><li>消费者使用basic.reject或 basic.nack声明消费失败，并且消息的requeue参数设置为false</li><li>消息是一个过期消息，超时无人消费</li><li>要投递的队列消息满了，无法投递</li></ul><p>如果这个包含死信的队列配置了<code>dead-letter-exchange</code>属性，指定了一个交换机，那么队列中的死信就会投递到这个交换机中，而这个交换机称为<strong>死信交换机</strong>（Dead Letter Exchange，检查DLX）。</p><p>如图，一个消息被消费者拒绝了，变成了死信：</p><p><img src="'+Q+'" alt="Snipaste_2023-06-20_18-30-49"></p><p>因为simple.queue绑定了死信交换机 dl.direct，因此死信会投递给这个交换机：</p><p><img src="'+R+'" alt="Snipaste_2023-06-20_18-31-58"></p><p>如果这个死信交换机也绑定了一个队列，则消息最终会进入这个存放死信的队列：</p><p><img src="'+c+'" alt="Snipaste_2023-06-20_18-33-07"></p><p>另外，队列将死信投递给死信交换机时，必须知道两个信息：</p><ul><li>死信交换机名称</li><li>死信交换机与死信队列绑定的RoutingKey</li></ul><p>这样才能确保投递的消息能到达死信交换机，并且正确的路由到死信队列。</p><p><img src="'+M+'" alt="Snipaste_2023-06-20_18-34-10"></p><h4 id="总结-1" tabindex="-1"><a class="header-anchor" href="#总结-1" aria-hidden="true">#</a> 总结</h4><p>什么样的消息会成为死信？</p><ul><li>消息被消费者reject或者返回nack</li><li>消息超时未消费</li><li>队列满了</li></ul><p>死信交换机的使用场景是什么？</p><ul><li>如果队列绑定了死信交换机，死信会投递到死信交换机；</li><li>可以利用死信交换机收集所有消费者处理失败的消息（死信），交由人工处理，进一步提高消息队列的可靠性。</li></ul><h3 id="_2-2利用死信交换机接收死信-拓展" tabindex="-1"><a class="header-anchor" href="#_2-2利用死信交换机接收死信-拓展" aria-hidden="true">#</a> 2.2利用死信交换机接收死信（拓展）</h3><p>在失败重试策略中，默认的 RejectAndDontRequeueRecoverer 会在本地重试次数耗尽后，发送reject给RabbitMQ，消息变成死信，被丢弃。</p><p>我们可以给 simple.queue 添加一个死信交换机，给死信交换机绑定一个队列。这样消息变成死信后也不会丢弃，而是最终投递到死信交换机，路由到与死信交换机绑定的队列。</p><p><img src="'+c+`" alt="Snipaste_2023-06-20_18-33-07"></p><p>在consumer服务中，定义一组死信交换机、死信队列：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLetterConfig</span> <span class="token punctuation">{</span>
    
    <span class="token comment">// 声明普通的 common.queue 队列，并且为其指定死信交换机：dl.direct</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">commonQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">&quot;common.queue&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定队列名称，并持久化</span>
                <span class="token punctuation">.</span><span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token string">&quot;dl.direct&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定死信交换机</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;dl.direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">deadLetterQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;dl.queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">deadLetterBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">deadLetterQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;common.queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>修改 SpringRabbitListener ，新增代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token string">&quot;common.queue&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenCommonQueue</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消费者接收到simple.queue的消息：【{}】&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 模拟异常</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string">&quot;消息处理完成！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试-2" tabindex="-1"><a class="header-anchor" href="#测试-2" aria-hidden="true">#</a> 测试</h4><p>重启 consumer 服务，publisher 中 SpringAmqpTest的新增一个测试方法，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 测试 死信交换机接受死信</span>
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testCommonQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 队列名称</span>
    <span class="token class-name">String</span> queueName <span class="token operator">=</span> <span class="token string">&quot;common.queue&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 消息</span>
    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;hello, dead letter!&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送消息</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span>queueName<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将消费失败重试机制的失败策略改回 RejectAndDontRequeueRecoverer：重试耗尽后，直接reject，丢弃消息。操作如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//    @Bean</span>
<span class="token comment">//    public MessageRecoverer republishMessageRecoverer(RabbitTemplate rabbitTemplate) {</span>
<span class="token comment">//        return new RepublishMessageRecoverer(rabbitTemplate, &quot;error.direct&quot;, &quot;error&quot;);</span>
<span class="token comment">//    }</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行测试方法，结果如下：</p><p><img src="`+j+'" alt="Snipaste_2023-06-20_19-27-21"></p><ul><li></li></ul><h3 id="_2-3接收超时死信的死信交换机" tabindex="-1"><a class="header-anchor" href="#_2-3接收超时死信的死信交换机" aria-hidden="true">#</a> 2.3接收超时死信的死信交换机</h3><p>一个队列中的消息如果超时未消费，则会变为死信，超时分为两种情况：</p><ul><li>消息所在的队列设置了超时时间</li><li>消息本身设置了超时时间</li></ul><p><img src="'+T+`" alt="Snipaste_2023-06-20_19-29-38.png"></p><ol><li><p>在consumer服务的SpringRabbitListener中，定义一个新的消费者，并且声明 死信交换机、死信队列：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>bindings <span class="token operator">=</span> <span class="token annotation punctuation">@QueueBinding</span><span class="token punctuation">(</span>
        value <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;dl.ttl.queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        exchange <span class="token operator">=</span> <span class="token annotation punctuation">@Exchange</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;dl.ttl.direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        key <span class="token operator">=</span> <span class="token string">&quot;ttl&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenDlQueue</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;接收到 dl.ttl.queue的延迟消息：{}&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>声明一个队列，并且指定TTL，要给队列设置超时时间，需要在声明队列时配置x-message-ttl属性</p></li><li><p>声明交换机，将ttl与交换机绑定</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TTLMessageConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">ttlQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">&quot;ttl.queue&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定队列名称，并持久化</span>
                <span class="token punctuation">.</span><span class="token function">ttl</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span> <span class="token comment">// 设置队列的超时时间，10秒</span>
                <span class="token punctuation">.</span><span class="token function">deadLetterExchange</span><span class="token punctuation">(</span><span class="token string">&quot;dl.ttl.direct&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定死信交换机</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">ttlExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DirectExchange</span><span class="token punctuation">(</span><span class="token string">&quot;ttl.direct&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">ttlBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">ttlQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">ttlExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;ttl&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><h4 id="测试-接受消息时-设定ttl" tabindex="-1"><a class="header-anchor" href="#测试-接受消息时-设定ttl" aria-hidden="true">#</a> 测试-接受消息时，设定TTL</h4><p>重启 consumer 服务，publisher 中 SpringAmqpTest的新增一个测试方法，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTTLQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建消息</span>
    <span class="token class-name">String</span> message <span class="token operator">=</span> <span class="token string">&quot;hello, ttl queue&quot;</span><span class="token punctuation">;</span>
    <span class="token comment">// 消息ID，需要封装到CorrelationData中</span>
    <span class="token class-name">CorrelationData</span> correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 发送消息</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;ttl.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ttl&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 记录日志</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;发送消息成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行方法，结果如下：</p><p><img src="`+D+'" alt="Snipaste_2023-06-20_19-41-12"></p><p><img src="'+C+`" alt="Snipaste_2023-06-20_19-41-32"></p><p>因为队列的TTL值是10000ms，也就是10秒。可以看到消息发送与接收之间的时差刚好是10秒。</p><h4 id="测试-发送消息时-设定ttl" tabindex="-1"><a class="header-anchor" href="#测试-发送消息时-设定ttl" aria-hidden="true">#</a> 测试-发送消息时，设定TTL</h4><p>在 publisher 中 SpringAmqpTest的新增一个测试方法，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testTTLQueue2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.准备消息</span>
    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span>
            <span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token string">&quot;hello, ttl message&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setDeliveryMode</span><span class="token punctuation">(</span><span class="token class-name">MessageDeliveryMode</span><span class="token punctuation">.</span><span class="token constant">PERSISTENT</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setExpiration</span><span class="token punctuation">(</span><span class="token string">&quot;5000&quot;</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.发送消息</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;ttl.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ttl&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.记录日志</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息已经成功发送！&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+B+'" alt="Snipaste_2023-06-20_19-46-00"></p><p><img src="'+E+'" alt="Snipaste_2023-06-20_19-46-20"></p><p>这次，发送与接收的延迟只有5秒。说明当队列、消息都设置了TTL时，任意一个到期就会成为死信。</p><h4 id="总结-2" tabindex="-1"><a class="header-anchor" href="#总结-2" aria-hidden="true">#</a> 总结</h4><p>消息超时的两种方式是？</p><ul><li>给队列设置ttl属性，进入队列后超过ttl时间的消息变为死信</li><li>给消息设置ttl属性，队列接收到消息超过ttl时间后变为死信</li></ul><p>如何实现发送一个消息20秒后消费者才收到消息？</p><ul><li>给消息的目标队列指定死信交换机</li><li>将消费者监听的队列绑定到死信交换机</li><li>发送消息时给消息设置超时时间为20秒</li></ul><h3 id="_2-4延迟队列" tabindex="-1"><a class="header-anchor" href="#_2-4延迟队列" aria-hidden="true">#</a> 2.4延迟队列</h3><p>利用TTL结合死信交换机，我们实现了消息发出后，消费者延迟收到消息的效果。这种消息模式就称为延迟队列（Delay Queue）模式。</p><p>延迟队列的使用场景包括：</p><ul><li>延迟发送短信</li><li>用户下单，如果用户在15 分钟内未支付，则自动取消</li><li>预约工作会议，20分钟后自动通知所有参会人员</li></ul><p>因为延迟队列的需求非常多，所以RabbitMQ的官方也推出了一个插件，原生支持延迟队列效果。</p>',166),X={href:"https://www.rabbitmq.com/community-plugins.html",target:"_blank",rel:"noopener noreferrer"},W=s("p",null,[s("img",{src:z,alt:"Snipaste_2023-06-20_20-15-38"})],-1),Y={href:"https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq",target:"_blank",rel:"noopener noreferrer"},Z=s("h4",{id:"安装delayexchange插件",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#安装delayexchange插件","aria-hidden":"true"},"#"),n(" 安装DelayExchange插件")],-1),nn={href:"https://github.com/rabbit/mq/rabbitmq-delayed-message-exchange/releases",target:"_blank",rel:"noopener noreferrer"},sn=e(`<h4 id="上传插件" tabindex="-1"><a class="header-anchor" href="#上传插件" aria-hidden="true">#</a> 上传插件</h4><p>因为我们是基于Docker安装，所以需要先查看RabbitMQ的插件目录对应的数据卷。如果不是基于Docker的同学，请参考第一章部分，重新创建Docker容器。</p><p>我们之前设定的RabbitMQ的数据卷名称为<code>mq-plugins</code>，所以我们使用下面命令查看数据卷：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker volume inspect mq-plugins
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>可以得到下面结果：</p><p><img src="`+A+`" alt="Snipaste_2023-06-20_20-34-00"></p><p>接下来，将插件上传到这个目录即可。</p><h4 id="安装插件" tabindex="-1"><a class="header-anchor" href="#安装插件" aria-hidden="true">#</a> 安装插件</h4><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 进入容器</span>
<span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> rabbitmq <span class="token function">bash</span>
<span class="token comment"># 开启插件</span>
rabbitmq-plugins <span class="token builtin class-name">enable</span> rabbitmq_delayed_message_exchange
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="delayexchange原理" tabindex="-1"><a class="header-anchor" href="#delayexchange原理" aria-hidden="true">#</a> DelayExchange原理</h4><p>DelayExchange 需要将一个交换机声明为delayed类型。当我们发送消息到delayExchange时，流程如下：</p><ul><li>接收消息</li><li>判断消息是否具备x-delay属性</li><li>如果有x-delay属性，说明是延迟消息，持久化到硬盘，读取x-delay值，作为延迟时间</li><li>返回routing not found结果给消息发送者</li><li>x-delay时间到期后，重新投递消息到指定队列</li></ul><h4 id="使用delayexchange" tabindex="-1"><a class="header-anchor" href="#使用delayexchange" aria-hidden="true">#</a> 使用DelayExchange</h4><p>插件的使用也非常简单：声明一个交换机，交换机的类型可以是任意类型，只需要设定delayed属性为true即可，然后声明队列与其绑定即可。</p><ul><li>声明DelayExchange交换机，基于注解方式（推荐）</li></ul><p><img src="`+L+`" alt="Snipaste_2023-06-20_20-44-10"></p><ul><li>也可以基于@Bean的方式：</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DelayMessageConfig</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">DirectExchange</span> <span class="token function">delayedExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">ExchangeBuilder</span>
                <span class="token punctuation">.</span><span class="token function">directExchange</span><span class="token punctuation">(</span><span class="token string">&quot;delay.queue&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 指定交换机类型和名称</span>
                <span class="token punctuation">.</span><span class="token function">delayed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 设置delay属性为空</span>
                <span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment">// 持久化</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">delayedQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;delay.queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Binding</span> <span class="token function">delayedBinding</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token function">delayQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span><span class="token function">delayExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token string">&quot;delay&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="发送消息" tabindex="-1"><a class="header-anchor" href="#发送消息" aria-hidden="true">#</a> 发送消息</h4><p>发送消息时，一定要携带x-delay属性，指定延迟的时间：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendDelayMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.准备消息</span>
    <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span>
            <span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token string">&quot;hello, delay message&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setDeliveryMode</span><span class="token punctuation">(</span><span class="token class-name">MessageDeliveryMode</span><span class="token punctuation">.</span><span class="token constant">PERSISTENT</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&quot;x-delay&quot;</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span> <span class="token comment">// 指定延迟的时间</span>
            <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 2.准备CorrelationData</span>
    <span class="token class-name">CorrelationData</span> correlationData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CorrelationData</span><span class="token punctuation">(</span><span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 3.发送消息</span>
    rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;delay.direct&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;delay&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> correlationData<span class="token punctuation">)</span><span class="token punctuation">;</span>

    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;发送消息成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试-3" tabindex="-1"><a class="header-anchor" href="#测试-3" aria-hidden="true">#</a> 测试</h4><p>执行 testSendDelayMessage()方法，结果如下：</p><p><img src="`+I+'" alt="Snipaste_2023-06-20_21-26-56"></p><p><img src="'+N+`" alt="Snipaste_2023-06-20_21-27-18"></p><p>RabbitMQ延迟队列消息路由失败（312 NO_ROUTE），但又成功发送及消费。</p><p><strong>原因</strong>：RabbitMQ 延迟插件不支持<code>mandatory=true</code>参数，如果启用会同时收到<code>延迟消息</code>和<code>路由失败消息</code></p><p>延时消息是从磁盘读取消息然后发送（后台任务），发送消息的时候无法保证两点：</p><ul><li>1、发送时消息路由的队列还存在</li><li>2、发送时原连接仍然支持回调方法</li><li>原因：消息写磁盘和从磁盘读取消息发送存在时间差，两个时间点的队列和连接情况可能不同。所以不支持Mandatory设置</li></ul><p><strong>解决方法</strong>：</p><p>方法一：设置mandatory=false</p><p>修改 publisher 服务的 application.yaml 文件，如下所示：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">template</span><span class="token punctuation">:</span>
      <span class="token key atrule">mandatory</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 定义消息路由失败时的策略。true，则调用 ReturnCallback；false：则直接丢弃消息</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>此时 ReturnCallBack 也无法使用了</li></ul><p>方法二：在 ReturnCallBack 处判断是否是延迟消息，若是，则不记录log日志</p><p>修改 publisher 服务的 CommonConfig，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonConfig</span> <span class="token keyword">implements</span> <span class="token class-name">ApplicationContextAware</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">ApplicationContext</span> applicationContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取RabbitTemplate</span>
        <span class="token class-name">RabbitTemplate</span> rabbitTemplate <span class="token operator">=</span> applicationContext<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">RabbitTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置ReturnCallback</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">setReturnCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> replyCode<span class="token punctuation">,</span> replyText<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
            <span class="token comment">// 判断是否是延迟消息</span>
            <span class="token class-name">Integer</span> receivedDelay <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getReceivedDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>receivedDelay <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> receivedDelay <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 是一个延迟消息，忽略这个错误提示</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token comment">// 投递失败，记录日志</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;消息发送失败，应答码{}，原因{}，交换机{}，路由键{},消息{}&quot;</span><span class="token punctuation">,</span>
                    replyCode<span class="token punctuation">,</span> replyText<span class="token punctuation">,</span> exchange<span class="token punctuation">,</span> routingKey<span class="token punctuation">,</span> message<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 如果有业务需要，可以重发消息</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="总结-3" tabindex="-1"><a class="header-anchor" href="#总结-3" aria-hidden="true">#</a> 总结</h4><p>延迟队列插件的使用步骤包括哪些？</p><ul><li><p>声明一个交换机，添加delayed属性为true</p></li><li><p>发送消息时，添加x-delay头，值为超时时间</p></li></ul><h2 id="_3-惰性队列" tabindex="-1"><a class="header-anchor" href="#_3-惰性队列" aria-hidden="true">#</a> 3.惰性队列</h2><h4 id="消息堆积问题" tabindex="-1"><a class="header-anchor" href="#消息堆积问题" aria-hidden="true">#</a> 消息堆积问题</h4><p>当生产者发送消息的速度超过了消费者处理消息的速度，就会导致队列中的消息堆积，直到队列存储消息达到上限。之后发送的消息就会成为死信，可能会被丢弃，这就是消息堆积问题。</p><p><img src="`+U+`" alt="Snipaste_2023-06-20_21-35-47"></p><p>解决消息堆积有两种思路：</p><ul><li>增加更多消费者，提高消费速度。也就是我们之前说的work queue模式</li><li>扩大队列容积，提高堆积上限</li></ul><p>要提升队列容积，把消息保存在内存中显然是不行的。</p><p>从RabbitMQ的3.6.0版本开始，就增加了Lazy Queues的概念，也就是惰性队列。惰性队列的特征如下：</p><ul><li>接收到消息后直接存入磁盘而非内存</li><li>消费者要消费消息时才会从磁盘中读取并加载到内存</li><li>支持数百万条的消息存储</li></ul><h4 id="基于命令行设置lazy-queue" tabindex="-1"><a class="header-anchor" href="#基于命令行设置lazy-queue" aria-hidden="true">#</a> 基于命令行设置lazy-queue</h4><p>要设置一个队列为惰性队列，只需要在声明队列时，指定x-queue-mode属性为lazy即可。可以通过命令行将一个运行中的队列修改为惰性队列：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>rabbitmqctl set_policy Lazy <span class="token string">&quot;^lazy-queue$&quot;</span> <span class="token string">&#39;{&quot;queue-mode&quot;:&quot;lazy&quot;}&#39;</span> --apply-to queues  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>命令解读：</p><ul><li><code>rabbitmqctl</code> ：RabbitMQ的命令行工具</li><li><code>set_policy</code> ：添加一个策略</li><li><code>Lazy</code> ：策略名称，可以自定义</li><li><code>&quot;^lazy-queue$&quot;</code> ：用正则表达式匹配队列的名字</li><li><code>&#39;{&quot;queue-mode&quot;:&quot;lazy&quot;}&#39;</code> ：设置队列模式为lazy模式</li><li><code>--apply-to queues </code>：策略的作用对象，是所有的队列</li></ul><h4 id="基于-bean声明lazy-queue" tabindex="-1"><a class="header-anchor" href="#基于-bean声明lazy-queue" aria-hidden="true">#</a> 基于@Bean声明lazy-queue</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyConfig</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">lazyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">&quot;lazy.queue&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开启 x-queue-mode 为 lazy</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="基于-rabbitlistener声明lazyqueue" tabindex="-1"><a class="header-anchor" href="#基于-rabbitlistener声明lazyqueue" aria-hidden="true">#</a> 基于@RabbitListener声明LazyQueue</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queuesToDeclare <span class="token operator">=</span> <span class="token annotation punctuation">@Queue</span><span class="token punctuation">(</span>
        name <span class="token operator">=</span> <span class="token string">&quot;lazy.queue&quot;</span><span class="token punctuation">,</span>
        arguments <span class="token operator">=</span> <span class="token annotation punctuation">@Argument</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">&quot;x-queue-mode&quot;</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token string">&quot;lazy&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">listenerLazyQueue</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;接收到 lazy.queue的延迟消息：{}&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="测试-4" tabindex="-1"><a class="header-anchor" href="#测试-4" aria-hidden="true">#</a> 测试</h4><p>修改 LazyConfig，声明 lazy.queue 和 normal.queue。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyConfig</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">lazyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span><span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">&quot;lazy.queue&quot;</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">lazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 开启 x-queue-mode 为 lazy</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">normalQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token string">&quot;normal.queue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>新增两个测试方法，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLazyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.准备消息</span>
        <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span>
                <span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token string">&quot;hello, Spring&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setDeliveryMode</span><span class="token punctuation">(</span><span class="token class-name">MessageDeliveryMode</span><span class="token punctuation">.</span><span class="token constant">NON_PERSISTENT</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.发送消息</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;lazy.queue&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testNormalQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1.准备消息</span>
        <span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span>
                <span class="token punctuation">.</span><span class="token function">withBody</span><span class="token punctuation">(</span><span class="token string">&quot;hello, Spring&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">setDeliveryMode</span><span class="token punctuation">(</span><span class="token class-name">MessageDeliveryMode</span><span class="token punctuation">.</span><span class="token constant">NON_PERSISTENT</span><span class="token punctuation">)</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 2.发送消息</span>
        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token string">&quot;normal.queue&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">nanoTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>endTime <span class="token operator">-</span> startTime<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行这两个测试方法，结果如下：</p><p><img src="`+P+'" alt="Snipaste_2023-06-21_10-21-06"></p><p>lazy.queue 直接刷入磁盘，而 normal.queue先刷入内存，再刷入磁盘。</p><ul><li>lazy.queue 直接刷入磁盘</li></ul><p><img src="'+K+'" alt="Snipaste_2023-06-21_10-21-26.png"></p><ul><li>normal.queue先刷入内存，再刷入磁盘</li></ul><p><img src="'+O+'" alt="Snipaste_2023-06-21_10-21-45"></p><h4 id="总结-4" tabindex="-1"><a class="header-anchor" href="#总结-4" aria-hidden="true">#</a> 总结</h4><p>消息堆积问题的解决方案？</p><ul><li>队列上绑定多个消费者，提高消费速度</li><li>使用惰性队列，可以再mq中保存更多消息</li></ul><p>惰性队列的优点有哪些？</p><ul><li>基于磁盘存储，消息上限高</li><li>没有间歇性的page-out，性能比较稳定</li></ul><p>惰性队列的缺点有哪些？</p><ul><li>基于磁盘存储，消息时效性会降低</li><li>性能受限于磁盘的IO</li></ul><h2 id="_4-mq集群" tabindex="-1"><a class="header-anchor" href="#_4-mq集群" aria-hidden="true">#</a> 4.MQ集群</h2><h3 id="_4-1集群分类" tabindex="-1"><a class="header-anchor" href="#_4-1集群分类" aria-hidden="true">#</a> 4.1集群分类</h3><p>RabbitMQ的是基于Erlang语言编写，而Erlang又是一个面向并发的语言，天然支持集群模式。RabbitMQ的集群有两种模式：</p><ul><li><p><strong>普通集群</strong>：是一种分布式集群，将队列分散到集群的各个节点，从而提高整个集群的并发能力。</p></li><li><p><strong>镜像集群</strong>：是一种主从集群，普通集群的基础上，添加了主从备份功能，提高集群的数据可用性。</p></li></ul><p>镜像集群虽然支持主从，但主从同步并不是强一致的，某些情况下可能有数据丢失的风险。因此在RabbitMQ的3.8版本以后，推出了新的功能：<strong>仲裁队列</strong>来代替镜像集群，底层采用Raft协议确保主从的数据一致性。</p><h3 id="_4-2普通集群" tabindex="-1"><a class="header-anchor" href="#_4-2普通集群" aria-hidden="true">#</a> 4.2普通集群</h3><h4 id="集群结构和特征" tabindex="-1"><a class="header-anchor" href="#集群结构和特征" aria-hidden="true">#</a> 集群结构和特征</h4><p>普通集群，或者叫标准集群（classic cluster），具备下列特征：</p><ul><li>会在集群的各个节点间共享部分数据，包括：交换机、队列元信息。不包含队列中的消息。</li><li>当访问集群某节点时，如果队列不在该节点，会从数据所在节点传递到当前节点并返回</li><li>队列所在节点宕机，队列中的消息就会丢失</li></ul><p>结构如图：</p><p><img src="'+F+'" alt="Snipaste_2023-06-21_10-32-00"></p><h4 id="部署" tabindex="-1"><a class="header-anchor" href="#部署" aria-hidden="true">#</a> 部署</h4>',89),an=e('<h3 id="_4-3镜像集群" tabindex="-1"><a class="header-anchor" href="#_4-3镜像集群" aria-hidden="true">#</a> 4.3镜像集群</h3><h4 id="集群结构和特征-1" tabindex="-1"><a class="header-anchor" href="#集群结构和特征-1" aria-hidden="true">#</a> 集群结构和特征</h4><p>镜像集群：本质是主从模式，具备下面的特征：</p><ul><li>交换机、队列、队列中的消息会在各个mq的镜像节点之间同步备份。</li><li>创建队列的节点被称为该队列的<strong>主节点，<strong>备份到的其它节点叫做该队列的</strong>镜像</strong>节点。</li><li>一个队列的主节点可能是另一个队列的镜像节点</li><li>所有操作都是主节点完成，然后同步给镜像节点</li><li>主宕机后，镜像节点会替代成新的主</li></ul><p><img src="'+V+'" alt="Snipaste_2023-06-21_10-34-27"></p><h4 id="部署-1" tabindex="-1"><a class="header-anchor" href="#部署-1" aria-hidden="true">#</a> 部署</h4>',6),en=e('<h3 id="_4-4仲裁队列" tabindex="-1"><a class="header-anchor" href="#_4-4仲裁队列" aria-hidden="true">#</a> 4.4仲裁队列</h3><h4 id="集群特征" tabindex="-1"><a class="header-anchor" href="#集群特征" aria-hidden="true">#</a> 集群特征</h4><p>仲裁队列：仲裁队列是3.8版本以后才有的新功能，用来替代镜像队列，具备下列特征：</p><ul><li>与镜像队列一样，都是主从模式，支持主从数据同步</li><li>使用非常简单，没有复杂的配置</li><li>主从同步基于Raft协议，强一致</li></ul><h4 id="部署-2" tabindex="-1"><a class="header-anchor" href="#部署-2" aria-hidden="true">#</a> 部署</h4>',5),tn=e(`<h4 id="java创建仲裁队列" tabindex="-1"><a class="header-anchor" href="#java创建仲裁队列" aria-hidden="true">#</a> Java创建仲裁队列</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">QuorumConfig</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">quorumQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token class-name">QueueBuilder</span>
                <span class="token punctuation">.</span><span class="token function">durable</span><span class="token punctuation">(</span><span class="token string">&quot;quorum.queue&quot;</span><span class="token punctuation">)</span> <span class="token comment">// 持久化</span>
                <span class="token punctuation">.</span><span class="token function">quorum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 仲裁队列</span>
                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="springamqp连接mq集群" tabindex="-1"><a class="header-anchor" href="#springamqp连接mq集群" aria-hidden="true">#</a> SpringAMQP连接MQ集群</h4><div class="custom-container tip"><p class="custom-container-title">注意</p><p>这里用address来代替host、port方式</p></div><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">spring</span><span class="token punctuation">:</span>
  <span class="token key atrule">rabbitmq</span><span class="token punctuation">:</span>
    <span class="token key atrule">addresses</span><span class="token punctuation">:</span> 192.168.150.105<span class="token punctuation">:</span><span class="token number">8071</span><span class="token punctuation">,</span> 192.168.150.105<span class="token punctuation">:</span><span class="token number">8072</span><span class="token punctuation">,</span> 192.168.150.105<span class="token punctuation">:</span><span class="token number">8073</span>
    <span class="token key atrule">username</span><span class="token punctuation">:</span> rabbitmq
    <span class="token key atrule">password</span><span class="token punctuation">:</span> rabbitmq
    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5);function pn(on,cn){const t=o("ExternalLinkIcon"),p=o("RouterLink");return u(),r("div",null,[$,s("p",null,[n("代码见 "),s("a",G,[n("lab-13-rabbitmq"),a(t)]),n(" 中的 advanced 部分")]),J,s("p",null,[n("这个插件就是DelayExchange插件。参考RabbitMQ的插件列表页面："),s("a",X,[n("https://www.rabbitmq.com/community-plugins.html"),a(t)])]),W,s("p",null,[n("使用方式可以参考官网地址："),s("a",Y,[n("https://blog.rabbitmq.com/posts/2015/04/scheduling-messages-with-rabbitmq"),a(t)])]),Z,s("p",null,[n("可以去对应的GitHub页面下载插件，地址为 "),s("a",nn,[n("https://github.com/rabbit/mq/rabbitmq-delayed-message-exchange/releases"),a(t)]),n("，注意版本兼容问题。")]),sn,s("p",null,[n("参考 "),a(p,{to:"/mq/rabbitmq/RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97.html"},{default:i(()=>[n("RabbitMQ部署指南")]),_:1})]),an,s("p",null,[n("参考 "),a(p,{to:"/mq/rabbitmq/RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97.html"},{default:i(()=>[n("RabbitMQ部署指南")]),_:1})]),en,s("p",null,[n("参考 "),a(p,{to:"/mq/rabbitmq/RabbitMQ%E9%83%A8%E7%BD%B2%E6%8C%87%E5%8D%97.html"},{default:i(()=>[n("RabbitMQ部署指南")]),_:1})]),tn])}const un=l(H,[["render",pn],["__file","RabbitMQ高级.html.vue"]]);export{un as default};
