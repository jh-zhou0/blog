import{_ as p,r as o,o as c,c as l,a as n,d as s,b as e,e as t}from"./app-66d6b4fd.js";const i="/blog/mq/rocketmq/Snipaste_2023-06-23_15-50-45.png",u="/blog/mq/rocketmq/Snipaste_2023-06-23_15-54-33.png",d="/blog/mq/rocketmq/Snipaste_2023-06-23_15-54-44.png",r="/blog/mq/rocketmq/Snipaste_2023-06-23_16-24-16.png",k="/blog/mq/rocketmq/Snipaste_2023-06-23_16-49-26.png",m="/blog/mq/rocketmq/Snipaste_2023-06-23_17-14-18.png",v="/blog/mq/rocketmq/Snipaste_2023-06-23_17-34-22.png",b="/blog/mq/rocketmq/Snipaste_2023-06-23_17-34-32.png",g={},h=t('<h1 id="rocketmq入门" tabindex="-1"><a class="header-anchor" href="#rocketmq入门" aria-hidden="true">#</a> RocketMQ入门</h1><p>在本文中，提供更多的生产者 Producer 和消费者 Consumer 的使用示例。例如说：</p><ul><li>Producer 三种发送消息的方式。</li><li>Producer 发送<strong>顺序</strong>消息，Consumer <strong>顺序</strong>消费消息。</li><li>Producer 发送<strong>定时</strong>消息。</li><li>Producer <strong>批量</strong>发送消息。</li><li>Producer 发送<strong>事务</strong>消息。</li><li>Consumer <strong>广播</strong>和<strong>集群</strong>消费消息。</li></ul>',3),y={class:"custom-container tip"},M=n("p",{class:"custom-container-title"},"提示",-1),w=n("strong",null,"官方文档",-1),_={href:"https://rocketmq.apache.org/zh/docs/",target:"_blank",rel:"noopener noreferrer"},f=n("h2",{id:"_0-代码",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_0-代码","aria-hidden":"true"},"#"),s(" 0.代码")],-1),D=n("p",null,"示例代码对应仓库：lab-14-rocketmq-demo",-1),S=n("h2",{id:"_1-rocketmq-spring",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-rocketmq-spring","aria-hidden":"true"},"#"),s(" 1.RocketMQ-Spring")],-1),T={href:"https://github.com/apache/rocketmq-spring",target:"_blank",rel:"noopener noreferrer"},q=n("li",null,"功能一：支持 Spring Message 规范，方便开发者从其它 MQ 快速切换到 RocketMQ 。",-1),R={href:"http://projects.spring.io/spring-boot/",target:"_blank",rel:"noopener noreferrer"},Q={href:"http://rocketmq.apache.org/",target:"_blank",rel:"noopener noreferrer"},j=t(`<p>Apache RocketMQ可用于以三种方式发送消息：<strong>同步、异步和单向传输</strong>。前两种消息类型是可靠的，因为无论它们是否成功发送都有响应。</p><ul><li><strong>同步</strong>发送是最常用的方式，是指消息发送方发出一条消息后，会在收到服务端同步响应之后才发下一条消息的通讯方式，可靠的同步传输被广泛应用于各种场景，如重要的通知消息、短消息通知等。</li><li><strong>异步</strong>发送是指发送方发出一条消息后，不等服务端返回响应，接着发送下一条消息的通讯方式。</li><li><strong>单向</strong>发送，发送方只负责发送消息，不等待服务端返回响应且没有回调函数触发，即只发送请求不等待应答。此方式发送消息的过程耗时非常短，一般在微秒级别。适用于某些耗时非常短，但对可靠性要求并不高的场景，例如日志收集。</li></ul><h2 id="_2-快速入门" tabindex="-1"><a class="header-anchor" href="#_2-快速入门" aria-hidden="true">#</a> 2.快速入门</h2><h3 id="_2-1引入依赖" tabindex="-1"><a class="header-anchor" href="#_2-1引入依赖" aria-hidden="true">#</a> 2.1引入依赖</h3><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code><span class="token prolog">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">&quot;</span></span>
         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-parent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.3.12.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>relativePath</span><span class="token punctuation">/&gt;</span></span> <span class="token comment">&lt;!-- lookup parent from repository --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modelVersion</span><span class="token punctuation">&gt;</span></span>4.0.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modelVersion</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lab-14-rocketmq-demo<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>
        <span class="token comment">&lt;!-- 实现对 RocketMQ 的自动化配置 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.apache.rocketmq<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>rocketmq-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>2.2.3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>

        <span class="token comment">&lt;!-- 方便等会写单元测试 --&gt;</span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-boot-starter-test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>scope</span><span class="token punctuation">&gt;</span></span>test<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>scope</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
        
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.projectlombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>lombok<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>1.18.26<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2应用配置文件" tabindex="-1"><a class="header-anchor" href="#_3-2应用配置文件" aria-hidden="true">#</a> 3.2应用配置文件</h3><p>在 application.yaml 中添加如下配置：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># rocketmq 配置项，对应 RocketMQProperties 配置类</span>
<span class="token key atrule">rocketmq</span><span class="token punctuation">:</span>
  <span class="token key atrule">name-server</span><span class="token punctuation">:</span> 192.168.100.100<span class="token punctuation">:</span><span class="token number">9876</span> <span class="token comment"># RocketMQ NameServer</span>
  <span class="token comment"># Producer 配置项</span>
  <span class="token key atrule">producer</span><span class="token punctuation">:</span>
    <span class="token key atrule">group</span><span class="token punctuation">:</span> demo<span class="token punctuation">-</span>producer<span class="token punctuation">-</span>group <span class="token comment"># 生产者分组</span>
    <span class="token key atrule">send-message-timeout</span><span class="token punctuation">:</span> <span class="token number">3000</span> <span class="token comment"># 发送消息超时时间，单位：毫秒。默认为 3000 。</span>
    <span class="token key atrule">compress-message-body-threshold</span><span class="token punctuation">:</span> <span class="token number">4096</span> <span class="token comment"># 消息压缩阀值，当消息体的大小超过该阀值后，进行消息压缩。默认为 4 * 1024B</span>
    <span class="token key atrule">max-message-size</span><span class="token punctuation">:</span> <span class="token number">4194304</span> <span class="token comment"># 消息体的最大允许大小。。默认为 4 * 1024 * 1024B</span>
    <span class="token key atrule">retry-times-when-send-failed</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># 同步发送消息时，失败重试次数。默认为 2 次。</span>
    <span class="token key atrule">retry-times-when-send-async-failed</span><span class="token punctuation">:</span> <span class="token number">2</span> <span class="token comment"># 异步发送消息时，失败重试次数。默认为 2 次。</span>
    <span class="token key atrule">retry-next-server</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 发送消息给 Broker 时，如果发送失败，是否重试另外一台 Broker 。默认为 false</span>
    <span class="token key atrule">access-key</span><span class="token punctuation">:</span> <span class="token comment"># Access Key ，可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/acl/user_guide.md 文档</span>
    <span class="token key atrule">secret-key</span><span class="token punctuation">:</span> <span class="token comment"># Secret Key</span>
    <span class="token key atrule">enable-msg-trace</span><span class="token punctuation">:</span> <span class="token boolean important">true</span> <span class="token comment"># 是否开启消息轨迹功能。默认为 true 开启。可阅读 https://github.com/apache/rocketmq/blob/master/docs/cn/msg_trace/user_guide.md 文档</span>
    <span class="token key atrule">customized-trace-topic</span><span class="token punctuation">:</span> RMQ_SYS_TRACE_TOPIC <span class="token comment"># 自定义消息轨迹的 Topic 。默认为 RMQ_SYS_TRACE_TOPIC 。</span>
  <span class="token comment"># Consumer 配置项</span>
  <span class="token key atrule">consumer</span><span class="token punctuation">:</span>
    <span class="token key atrule">listeners</span><span class="token punctuation">:</span> <span class="token comment"># 配置某个消费分组，是否监听指定 Topic 。结构为 Map&lt;消费者分组, &lt;Topic, Boolean&gt;&gt; 。默认情况下，不配置表示监听。</span>
      <span class="token key atrule">test-consumer-group</span><span class="token punctuation">:</span>
        <span class="token key atrule">topic1</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment"># 关闭 test-consumer-group 对 topic1 的监听消费</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,8),C=n("code",null,"rocketmq",-1),I={href:"https://github.com/apache/rocketmq-spring/blob/master/rocketmq-spring-boot/src/main/java/org/apache/rocketmq/spring/autoconfigure/RocketMQProperties.java",target:"_blank",rel:"noopener noreferrer"},x={href:"https://github.com/apache/rocketmq-spring/blob/master/rocketmq-spring-boot/src/main/java/org/apache/rocketmq/spring/autoconfigure/RocketMQAutoConfiguration.java",target:"_blank",rel:"noopener noreferrer"},O=t("<li><code>rocketmq.name-server</code> 配置项，设置 RocketMQ Namesrv 地址。如果多个，使用逗号分隔。</li><li><code>rocketmq.producer</code> 配置项，一看就知道是 RocketMQ Producer 所独有。 <ul><li><code>group</code> 配置，生产者分组。</li><li><code>retry-next-server</code> 配置，发送消息给 Broker 时，如果发送失败，是否重试另外一台 Broker 。默认为 <code>false</code> 。如果胖友使用多<strong>主</strong> Broker 的情况下，需要设置 <code>true</code> ，这样才会在发送消息失败时，重试另外一台 Broker 。</li><li>其它配置，一般默认即可。</li></ul></li><li><code>rocketmq.consumer</code>配置项，一看就知道是 RocketMQ Consumer 所独有。 <ul><li><code>listener</code> 配置，配置某个消费分组，是否监听指定 Topic 。结构为 <code>Map&lt;消费者分组, &lt;Topic, Boolean&gt;&gt;</code> 。默认情况下，<strong>不配置表示监听</strong>。一般情况下，只有我们在想不监听消费某个消费分组的某个 Topic 时，才需要配 <code>listener</code> 配置。</li></ul></li>",3),P=t(`<h3 id="_3-3application" tabindex="-1"><a class="header-anchor" href="#_3-3application" aria-hidden="true">#</a> 3.3Application</h3><p>创建启动类 RocketMQApplication，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@SpringBootApplication</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RocketMQApplication</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">SpringApplication</span><span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">RocketMQApplication</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4demo01message" tabindex="-1"><a class="header-anchor" href="#_3-4demo01message" aria-hidden="true">#</a> 3.4Demo01Message</h3><p>创建消息类 Demo01Message，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Message</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOPIC</span> <span class="token operator">=</span> <span class="token string">&quot;DEMO_01&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 编号
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>TOPIC</code> 静态属性，我们设置该消息类对应 Topic 为 <code>&quot;DEMO_01&quot;</code> 。</li></ul><h3 id="_3-5demo01producer" tabindex="-1"><a class="header-anchor" href="#_3-5demo01producer" aria-hidden="true">#</a> 3.5Demo01Producer</h3><p>创建消息发送类 Demo01Producer，实现三种方式发送消息，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Producer</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RocketMQTemplate</span> rocketMQTemplate<span class="token punctuation">;</span>
    
    <span class="token keyword">public</span> <span class="token class-name">SendResult</span> <span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 Demo01Message 消息</span>
        <span class="token class-name">Demo01Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo01Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 同步发送消息</span>
        <span class="token keyword">return</span> rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token class-name">Demo01Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncSend</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">SendCallback</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 Demo01Message 消息</span>
        <span class="token class-name">Demo01Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo01Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 异步发送消息</span>
        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">asyncSend</span><span class="token punctuation">(</span><span class="token class-name">Demo01Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onewaySend</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 Demo01Message 消息</span>
        <span class="token class-name">Demo01Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo01Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 单向发送消息</span>
        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">sendOneWay</span><span class="token punctuation">(</span><span class="token class-name">Demo01Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10),E={href:"https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/main/java/org/springframework/messaging/core/AbstractMessageSendingTemplate.java",target:"_blank",rel:"noopener noreferrer"},L={href:"https://github.com/apache/rocketmq-spring/blob/master/rocketmq-spring-boot/src/main/java/org/apache/rocketmq/spring/core/RocketMQTemplate.java#L57",target:"_blank",rel:"noopener noreferrer"},A=n("code",null,"producer",-1),B={href:"https://github.com/apache/rocketmq-spring/blob/8b2426ea89d704d61c00497a1320b9b9ccd5a61e/rocketmq-spring-boot/src/main/java/org/apache/rocketmq/spring/support/RocketMQUtil.java#L203-L229",target:"_blank",rel:"noopener noreferrer"},N={href:"https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/main/java/org/springframework/messaging/converter/MappingJackson2MessageConverter.java",target:"_blank",rel:"noopener noreferrer"},z={href:"https://github.com/alibaba/fastjson/blob/master/src/main/java/com/alibaba/fastjson/support/spring/messaging/MappingFastJsonMessageConverter.java",target:"_blank",rel:"noopener noreferrer"},F=n("strong",null,"JSON",-1),G=n("li",null,[n("p",null,"对于 String 类型，则直接获得其 byte[] 内容")],-1),K=n("li",null,[n("p",null,"对于 byte[] 类型，则直接使用即可")],-1),W=t(`<h3 id="_3-6demo01consumer" tabindex="-1"><a class="header-anchor" href="#_3-6demo01consumer" aria-hidden="true">#</a> 3.6Demo01Consumer</h3><p>创建 Demo01Consumer 类，实现 Rocket-Spring 定义的 RocketMQListener 接口，消费消息，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>
        topic <span class="token operator">=</span> <span class="token class-name">Demo01Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span>
        consumerGroup <span class="token operator">=</span> <span class="token string">&quot;demo01-consumer-group-&quot;</span> <span class="token operator">+</span> <span class="token class-name">Demo01Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Demo01Message</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Demo01Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[onMessage][线程编号:{} 消息内容：{}]&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3),U={href:"https://github.com/apache/rocketmq-spring/blob/master/rocketmq-spring-boot/src/main/java/org/apache/rocketmq/spring/annotation/RocketMQMessageListener.java",target:"_blank",rel:"noopener noreferrer"},J=n("code",null,"@RocketMQMessageListener",-1),Y=n("code",null,'"DEMO_01"',-1),V=n("code",null,"demo01-consumer-group-DEMO_01",-1),X=t(`<ul><li><p>每个消费者分组职责单一，只消费一个 Topic 。</p></li><li><p>每个消费者分组是独占一个线程池，这样能够保证多个 Topic 隔离在不同线程池，保证隔离性，从而避免一个 Topic 消费很慢，影响到另外的 Topic 的消费。</p></li></ul><p>实现 RocketMQListener 接口，在 T 泛型里，设置消费的消息对应的类。此处，设置了 Demo01Message 类。</p><h3 id="_3-7demo01aconsumer" tabindex="-1"><a class="header-anchor" href="#_3-7demo01aconsumer" aria-hidden="true">#</a> 3.7Demo01AConsumer</h3><p>创建 Demo01AConsumer 类，实现 Rocket-Spring 定义的 RocketMQListener 接口，消费消息，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>
        topic <span class="token operator">=</span> <span class="token class-name">Demo01Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span>
        consumerGroup <span class="token operator">=</span> <span class="token string">&quot;demo01-A-consumer-group-&quot;</span> <span class="token operator">+</span> <span class="token class-name">Demo01Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01AConsumer</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">MessageExt</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[onMessage][线程编号:{} 消息内容：{}]&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>与 Demo01Consumer 的差异：</p><p><strong>差异一</strong>，消费者分组修<strong>改成</strong>了 <code>&quot;demo01-A-consumer-group-DEMO_01&quot;</code> 。这样，可以测试 RocketMQ 集群消费的特性。</p><p><strong>集群消费（Clustering）</strong>：集群消费模式下，相同 Consumer Group 的每个 Consumer 实例平均分摊消息。</p><ul><li><p>如果发送一条 Topic 为 <code>&quot;DEMO_01&quot;</code> 的消息，可以分别被 <code>&quot;demo01-A-consumer-group-DEMO_01&quot;</code> 和 <code>&quot;demo01-consumer-group-DEMO_01&quot;</code> 都消费一次。</p></li><li><p>如果启动两个该示例的实例，则消费者分组 <code>&quot;demo01-A-consumer-group-DEMO_01&quot;</code> 和 <code>&quot;demo01-consumer-group-DEMO_01&quot;</code> 都会有多个 Consumer 实例。此时，再发送一条 Topic 为 <code>&quot;DEMO_01&quot;</code> 的消息，只会被 <code>&quot;demo01-A-consumer-group-DEMO_01&quot;</code> 的一个 Consumer 消费一次，也同样只会被 <code>&quot;demo01-A-consumer-group-DEMO_01&quot;</code> 的一个 Consumer 消费一次。</p></li></ul><p>通过<strong>集群消费</strong>的机制，可以实现针对相同 Topic ，不同消费者分组实现各自的业务逻辑。例如说：用户注册成功时，发送一条 Topic 为 <code>&quot;USER_REGISTER&quot;</code> 的消息。然后，不同模块使用不同的消费者分组，订阅该 Topic ，实现各自的拓展逻辑：</p><ul><li>积分模块：判断如果是手机注册，给用户增加 20 积分。</li><li>优惠劵模块：因为是新用户，所以发放新用户专享优惠劵。</li><li>站内信模块：因为是新用户，所以发送新用户的欢迎语的站内信。</li><li>... 等等</li></ul><p>这样，我们就可以将注册成功后的业务拓展逻辑，实现业务上的解耦，未来也更加容易拓展。同时，也提高了注册接口的性能，避免用户需要等待业务拓展逻辑执行完成后，才响应注册成功。</p>`,12),H=n("strong",null,"差异二",-1),$={href:"https://github.com/apache/rocketmq/blob/master/common/src/main/java/org/apache/rocketmq/common/message/MessageExt.java",target:"_blank",rel:"noopener noreferrer"},Z=n("code",null,"body",-1),nn=t(`<h3 id="_3-8测试" tabindex="-1"><a class="header-anchor" href="#_3-8测试" aria-hidden="true">#</a> 3.8测试</h3><p>启动 RocketMQApplication，创建 Demo01ProducerTest 测试类，编写三个单元测试方法，调用 Demo01Producer 三种发送消息的方式。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo01ProducerTest</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">Demo01Producer</span> producer<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testSyncSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SendResult</span> result <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[testSyncSend][发送编号：[{}] 发送结果：[{}]]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 阻塞等待，保证消费</span>
        <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testASyncSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">asyncSend</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[testASyncSend][发送编号：[{}] 发送成功，结果为：[{}]]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[testASyncSend][发送编号：[{}] 发送异常]]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 阻塞等待，保证消费</span>
        <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOnewaySend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        producer<span class="token punctuation">.</span><span class="token function">onewaySend</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[testOnewaySend][发送编号：[{}] 发送完成]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 阻塞等待，保证消费</span>
        <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>① 执行 <code>#testSyncSend()</code> 方法，测试同步发送消息。控制台输出如下：</p><p><img src="`+i+'" alt="Snipaste_2023-06-23_15-50-45"></p><ul><li><p>通过日志我们可以看到，发送的消息分别被 Demo01AConsumer 和 Demo01Consumer 两个消费者（消费者分组）都消费了一次。</p></li><li><p>同时，两个消费者在不同的线程池中，消费了这条消息。虽然说两条日志里，我们都看到了线程名为 <code>&quot;MessageThread_1&quot;</code> ，但是线程编号分别是 63 和 64 。😈 因为，每个 RocketMQ Consumer 的消费线程池创建的线程都是以 <code>&quot;MessageThread_&quot;</code> 开头，同时这里相同的线程名结果不同的线程编号，很容易判断出时候用了两个不同的消费线程池。</p></li></ul><p>② 执行 <code>#testASyncSend()</code> 方法，测试异步发送消息。控制台输出如下：</p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>不要关闭 <code>#testSyncSend()</code> 单元测试方法，因为我们要模拟每个消费者集群，都有多个 Consumer 节点。</p></div><p><img src="'+u+'" alt="Snipaste_2023-06-23_15-54-33"></p><p><img src="'+d+'" alt="Snipaste_2023-06-23_15-54-44"></p><ul><li>和 <code>#testSyncSend()</code> 方法执行的结果，是一致的。此时，我们打开 <code>#testSyncSend()</code> 方法所在的控制台，看到有消息消费的日志。说明，符合集群消费的机制：<strong>集群消费模式下，相同 Consumer Group 的每个 Consumer 实例平均分摊消息。</strong>。</li><li>😈 消息消费的日志，也可能出现在 <code>#testASyncSend()</code> 方法所在的控制台，而不在 <code>#testSyncSend()</code> 方法所在的控制台。</li></ul><p>③ 执行<code>#testOnewaySend()</code> 方法，结果与上述类似。</p><h3 id="_3-9-extrocketmqtemplateconfiguration" tabindex="-1"><a class="header-anchor" href="#_3-9-extrocketmqtemplateconfiguration" aria-hidden="true">#</a> 3.9@ExtRocketMQTemplateConfiguration</h3>',13),sn={href:"https://github.com/apache/rocketmq-spring/blob/master/rocketmq-spring-boot/src/main/java/org/apache/rocketmq/spring/annotation/ExtRocketMQTemplateConfiguration.java",target:"_blank",rel:"noopener noreferrer"},an=n("code",null,"@ExtRocketMQTemplateConfiguration",-1),en=t(`<p><code>@ExtRocketMQTemplateConfiguration</code> 注解的简单使用示例，代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@ExtRocketMQTemplateConfiguration</span><span class="token punctuation">(</span>nameServer <span class="token operator">=</span> <span class="token string">&quot;\${demo.rocketmq.extNameServer:demo.rocketmq.name-server}&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExtRocketMQTemplate</span> <span class="token keyword">extends</span> <span class="token class-name">RocketMQTemplate</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>在类上，添加 <code>@ExtRocketMQTemplateConfiguration</code> 注解，并设置连接的 RocketMQ Namesrv 地址。</li><li>同时，需要继承 RocketMQTemplate 类，从而使我们可以直接使用 <code>@Autowire</code> 或 <code>@Resource</code> 注解，注入 RocketMQTemplate Bean 属性。</li></ul><h2 id="_3-批量发送消息" tabindex="-1"><a class="header-anchor" href="#_3-批量发送消息" aria-hidden="true">#</a> 3.批量发送消息</h2><p>在一些业务场景下，我们希望使用 Producer 批量发送消息，提高发送性能。在 RocketMQTemplate 中，提供了一个方法方法批量发送消息的方法。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// RocketMQTemplate.java</span>

<span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span> <span class="token keyword">extends</span> <span class="token class-name">Message</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">SendResult</span> <span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token class-name">String</span> destination<span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> messages<span class="token punctuation">,</span> <span class="token keyword">long</span> timeout<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ... 省略具体代码实现</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),tn=n("li",null,[s("通过方法参数 "),n("code",null,"destination"),s(" 可知，必须发送相同 Topic 的消息。")],-1),pn=n("code",null,"messages",-1),on={href:"https://github.com/spring-projects/spring-framework/blob/master/spring-messaging/src/main/java/org/springframework/messaging/Message.java",target:"_blank",rel:"noopener noreferrer"},cn=n("code",null,"#syncSend(...)",-1),ln=n("li",null,[s("通过方法名可知，这个是"),n("strong",null,"同步"),s("批量发送消息。")],-1),un=t(`<div class="custom-container tip"><p class="custom-container-title">注意</p><p>虽然是批量发送多条消息，但是是以所有消息加起来的大小，不能超过消息的最大大小的限制，而不是按照单条计算。😈 所以，一次性发送的消息特别多，还是需要<strong>分批的</strong>进行批量发送。</p></div><h3 id="_3-1demo02message" tabindex="-1"><a class="header-anchor" href="#_3-1demo02message" aria-hidden="true">#</a> 3.1Demo02Message</h3><p>创建 Demo02Message 消息类，提供给当前示例使用。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Message</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOPIC</span> <span class="token operator">=</span> <span class="token string">&quot;DEMO_02&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 编号
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-2demo02producer" tabindex="-1"><a class="header-anchor" href="#_3-2demo02producer" aria-hidden="true">#</a> 3.2Demo02Producer</h3><p>创建 Demo02Producer 类，它会使用 RocketMQTemplate 实现批量发送消息。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Producer</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RocketMQTemplate</span> rocketMQTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SendResult</span> <span class="token function">sendBatch</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// &lt;X&gt; 创建多条 Demo02Message 消息</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Message</span><span class="token punctuation">&lt;</span><span class="token class-name">Demo02Message</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> messages <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>ids<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Integer</span> id <span class="token operator">:</span> ids<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 创建 Demo02Message 消息</span>
            <span class="token class-name">Demo02Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo02Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            message<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 构建 Spring Messaging 定义的 Message 消息</span>
            messages<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 同步批量发送消息</span>
        <span class="token keyword">return</span> rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token class-name">Demo02Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span> messages<span class="token punctuation">,</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-3demo02consumer" tabindex="-1"><a class="header-anchor" href="#_3-3demo02consumer" aria-hidden="true">#</a> 3.3Demo02Consumer</h3><p>创建 Demo02Consumer 类，实现 Rocket-Spring 定义的 RocketMQListener 接口，消费消息。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>
        topic <span class="token operator">=</span> <span class="token class-name">Demo02Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span>
        consumerGroup <span class="token operator">=</span> <span class="token string">&quot;demo02-consumer-group-&quot;</span> <span class="token operator">+</span> <span class="token class-name">Demo02Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Demo02Message</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Demo02Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[onMessage][线程编号:{} 消息内容：{}]&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-4测试" tabindex="-1"><a class="header-anchor" href="#_3-4测试" aria-hidden="true">#</a> 3.4测试</h3><p>创建 Demo02ProducerTest 测试类，编写一个单元测试方法，调用 Demo02Producer 批量发送消息。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo02ProducerTest</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">Demo02Producer</span> producer<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">void</span> <span class="token function">testSendBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> ids <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SendResult</span> result <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">sendBatch</span><span class="token punctuation">(</span>ids<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[testSendBatch][发送编号：[{}] 发送结果：[{}]]&quot;</span><span class="token punctuation">,</span> ids<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 阻塞等待，保证消费</span>
        <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 <code>#testSendBatch()</code> 方法，测试批量发送消息。控制台输出如下：</p><p><img src="`+r+'" alt="Snipaste_2023-06-23_16-24-16"></p><ul><li>可以看到三条消息，被 Demo02Consumer <strong>并发</strong>消费完成。</li></ul><h2 id="_4-延迟消息" tabindex="-1"><a class="header-anchor" href="#_4-延迟消息" aria-hidden="true">#</a> 4.延迟消息</h2><p>延迟消息发送是指消息发送到Apache RocketMQ后，并不期望立马投递这条消息，而是延迟一定时间后才投递到Consumer进行消费。</p><p>在分布式定时调度触发、任务超时处理等场景，需要实现精准、可靠的延时事件触发。使用 RocketMQ 的延时消息可以简化定时调度任务的开发逻辑，实现高性能、可扩展、高可靠的定时触发能力。</p><p>Apache RocketMQ 一共支持18个等级的延迟投递，具体时间如下：</p><table><thead><tr><th>投递等级（delay level）</th><th>延迟时间</th><th>投递等级（delay level）</th><th>延迟时间</th></tr></thead><tbody><tr><td>1</td><td>1s</td><td>10</td><td>6min</td></tr><tr><td>2</td><td>5s</td><td>11</td><td>7min</td></tr><tr><td>3</td><td>10s</td><td>12</td><td>8min</td></tr><tr><td>4</td><td>30s</td><td>13</td><td>9min</td></tr><tr><td>5</td><td>1min</td><td>14</td><td>10min</td></tr><tr><td>6</td><td>2min</td><td>15</td><td>20min</td></tr><tr><td>7</td><td>3min</td><td>16</td><td>30min</td></tr><tr><td>8</td><td>4min</td><td>17</td><td>1h</td></tr><tr><td>9</td><td>5min</td><td>18</td><td>2h</td></tr></tbody></table>',21),dn={href:"https://github.com/didi/DDMQ/",target:"_blank",rel:"noopener noreferrer"},rn=t(`<h3 id="_4-1demo03message" tabindex="-1"><a class="header-anchor" href="#_4-1demo03message" aria-hidden="true">#</a> 4.1Demo03Message</h3><p>创建 Demo03Message 消息类，提供给当前示例使用。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03Message</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOPIC</span> <span class="token operator">=</span> <span class="token string">&quot;DEMO_03&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 编号
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-2demo03producer" tabindex="-1"><a class="header-anchor" href="#_4-2demo03producer" aria-hidden="true">#</a> 4.2Demo03Producer</h3><p>创建 Demo03Producer 类，它会使用 RocketMQTemplate 实现发送定时消息。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03Producer</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RocketMQTemplate</span> rocketMQTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SendResult</span> <span class="token function">syncSendDelay</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> delayLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 Demo03Message 消息</span>
        <span class="token class-name">Demo03Message</span> demo03Message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo03Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        demo03Message<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Demo03Message</span><span class="token punctuation">&gt;</span></span> message<span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>demo03Message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 同步发送消息</span>
        <span class="token keyword">return</span> rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token class-name">Demo03Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> delayLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncSendDelay</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token keyword">int</span> delayLevel<span class="token punctuation">,</span> <span class="token class-name">SendCallback</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 Demo03Message 消息</span>
        <span class="token class-name">Demo03Message</span> demo03Message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo03Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        demo03Message<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Demo03Message</span><span class="token punctuation">&gt;</span></span> message<span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>demo03Message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 异步发送消息</span>
        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">asyncSend</span><span class="token punctuation">(</span><span class="token class-name">Demo03Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> callback<span class="token punctuation">,</span> <span class="token number">30</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">,</span> delayLevel<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>目前只支持<strong>同步</strong>和<strong>异步</strong>发送延迟消息。</li></ul><h3 id="_4-3demo03consumer" tabindex="-1"><a class="header-anchor" href="#_4-3demo03consumer" aria-hidden="true">#</a> 4.3Demo03Consumer</h3><p>创建 Demo03Consumer 类，实现 Rocket-Spring 定义的 RocketMQListener 接口，消费消息。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>
        topic <span class="token operator">=</span> <span class="token class-name">Demo03Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span>
        consumerGroup <span class="token operator">=</span> <span class="token string">&quot;demo03-consumer-group-&quot;</span> <span class="token operator">+</span> <span class="token class-name">Demo03Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Demo03Message</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Demo03Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[onMessage][线程编号:{} 消息内容：{}]&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-4测试" tabindex="-1"><a class="header-anchor" href="#_4-4测试" aria-hidden="true">#</a> 4.4测试</h3><p>创建 Demo03ProducerTest 测试类，编写一个单元测试方法，调用 Demo03Producer 发送定时消息。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo03ProducerTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">Demo03Producer</span> producer<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSyncSendDelay</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SendResult</span> result <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">syncSendDelay</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 延迟级别 3 ，即 10 秒后消费</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[testSyncSendDelay][发送编号：[{}] 发送结果：[{}]]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 阻塞等待，保证消费</span>
        <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 <code>#testSyncSendDelay()</code> 方法，测试发送延迟消息。控制台输出如下：</p><p><img src="`+k+`" alt="Snipaste_2023-06-23_16-49-26"></p><ul><li>发送的消息，延迟 10 秒被 Demo03Consumer 消费。</li></ul><h2 id="_5-消费重试" tabindex="-1"><a class="header-anchor" href="#_5-消费重试" aria-hidden="true">#</a> 5.消费重试</h2><p>RocketMQ 提供<strong>消费重试</strong>的机制。在消息<strong>消费失败</strong>的时候，RocketMQ 会通过<strong>消费重试</strong>机制，重新投递该消息给 Consumer ，让 Consumer 有机会重新消费消息，实现消费成功。</p><p>当然，RocketMQ 并不会无限重新投递消息给 Consumer 重新消费，而是在默认情况下，达到 16 次重试次数时，Consumer 还是消费失败时，该消息就会进入到<strong>死信队列</strong>。</p><div class="custom-container tip"><p class="custom-container-title">死信队列用于处理无法被正常消费的消息</p><p>当一条消息初次消费失败，消息队列会自动进行消息重试；达到最大重试次数后，若消费依然失败，则表明消费者在正常情况下无法正确地消费该消息，此时，消息队列不会立刻将消息丢弃，而是将其发送到该消费者对应的特殊队列中。</p><p>RocketMQ 将这种正常情况下无法被消费的消息称为死信消息（Dead-Letter Message），将存储死信消息的特殊队列称为死信队列（Dead-Letter Queue）。在 RocketMQ 中，可以通过使用 console 控制台对死信队列中的消息进行重发来使得消费者实例再次进行消费。</p></div><p>每条消息的失败重试，是有一定的间隔时间。实际上，消费重试是基于<strong>延迟定时</strong>消息来实现，第一次重试消费按照延迟级别为 <strong>3</strong> 开始。😈 所以，默认为 16 次重试消费，也非常好理解，毕竟延迟级别最高为 18 呀。</p><div class="custom-container tip"><p class="custom-container-title">注意</p><p>只有<strong>集群消费</strong>模式下，才有消息重试。</p></div><h3 id="_5-1demo04message" tabindex="-1"><a class="header-anchor" href="#_5-1demo04message" aria-hidden="true">#</a> 5.1Demo04Message</h3><p>创建 Demo04Message 消息类，提供给当前示例使用。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04Message</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOPIC</span> <span class="token operator">=</span> <span class="token string">&quot;DEMO_04&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 编号
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-2demo04producer" tabindex="-1"><a class="header-anchor" href="#_5-2demo04producer" aria-hidden="true">#</a> 5.2Demo04Producer</h3><p>创建 Demo04Producer 类，它会使用 RocketMQ-Spring 封装提供的 RocketMQTemplate ，实现同步发送消息。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04Producer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RocketMQTemplate</span> rocketMQTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SendResult</span> <span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 Demo04Message 消息</span>
        <span class="token class-name">Demo04Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo04Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 同步发送消息</span>
        <span class="token keyword">return</span> rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token class-name">Demo04Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3demo04consumer" tabindex="-1"><a class="header-anchor" href="#_5-3demo04consumer" aria-hidden="true">#</a> 5.3Demo04Consumer</h3><p>创建 Demo04Consumer 类，实现 Rocket-Spring 定义的 RocketMQListener 接口，消费消息。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>
        topic <span class="token operator">=</span> <span class="token class-name">Demo04Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span>
        consumerGroup <span class="token operator">=</span> <span class="token string">&quot;demo04-consumer-group-&quot;</span> <span class="token operator">+</span> <span class="token class-name">Demo04Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Demo04Message</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Demo04Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[onMessage][线程编号:{} 消息内容：{}]&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注意，此处抛出一个 RuntimeException 异常，模拟消费失败</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">&quot;我就是故意抛出一个异常&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-4测试" tabindex="-1"><a class="header-anchor" href="#_5-4测试" aria-hidden="true">#</a> 5.4测试</h3><p>创建 Demo04ProducerTest 测试类，编写一个单元测试方法，调用 Demo04Producer 同步发送消息。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo04ProducerTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">Demo04Producer</span> producer<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSyncSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SendResult</span> result <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[testSyncSend][发送编号：[{}] 发送结果：[{}]]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 阻塞等待，保证消费</span>
        <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 <code>#testSyncSend()</code> 方法，同步发送消息。控制台输出如下：</p><p><img src="`+m+`" alt="Snipaste_2023-06-23_17-14-18"></p><ul><li>从日志中，我们可以看到，消息因为消费失败后，又重试消费了多次。</li></ul><h2 id="_6-广播消费" tabindex="-1"><a class="header-anchor" href="#_6-广播消费" aria-hidden="true">#</a> 6.广播消费</h2><p>在上述的示例中，都是使用集群消费。而在一些场景下，我们需要使用<strong>广播消费</strong>。</p><p>广播消费模式下，相同 Consumer Group 的每个 Consumer 实例都接收全量的消息。</p><p>例如说，在应用中，缓存了数据字典等配置表在内存中，可以通过 RocketMQ 广播消费，实现每个应用节点都消费消息，刷新本地内存的缓存。</p><p>又例如说，我们基于 WebSocket 实现了 IM 聊天，在我们给用户主动发送消息时，因为我们不知道用户连接的是哪个提供 WebSocket 的应用，所以可以通过 RocketMQ 广播消费，每个应用判断当前用户是否是和自己提供的 WebSocket 服务连接，如果是，则推送消息给用户。</p><h3 id="_6-1demo05message" tabindex="-1"><a class="header-anchor" href="#_6-1demo05message" aria-hidden="true">#</a> 6.1Demo05Message</h3><p>创建 Demo05Message 消息类，提供给当前示例使用。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05Message</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOPIC</span> <span class="token operator">=</span> <span class="token string">&quot;DEMO_05&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 编号
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-2demo04producer" tabindex="-1"><a class="header-anchor" href="#_6-2demo04producer" aria-hidden="true">#</a> 6.2Demo04Producer</h3><p>创建 Demo04Producer 类，它会使用 RocketMQ-Spring 封装提供的 RocketMQTemplate ，实现同步发送消息。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05Producer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Autowired</span>
    <span class="token keyword">private</span> <span class="token class-name">RocketMQTemplate</span> rocketMQTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SendResult</span> <span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 Demo05Message 消息</span>
        <span class="token class-name">Demo05Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo05Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 同步发送消息</span>
        <span class="token keyword">return</span> rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span><span class="token class-name">Demo05Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-3demo05consumer" tabindex="-1"><a class="header-anchor" href="#_6-3demo05consumer" aria-hidden="true">#</a> 6.3Demo05Consumer</h3><p>创建 Demo05Consumer 类，实现 Rocket-Spring 定义的 RocketMQListener 接口，消费消息。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>
        topic <span class="token operator">=</span> <span class="token class-name">Demo05Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span>
        consumerGroup <span class="token operator">=</span> <span class="token string">&quot;demo05-consumer-group-&quot;</span> <span class="token operator">+</span> <span class="token class-name">Demo05Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span>
        messageModel <span class="token operator">=</span> <span class="token class-name">MessageModel</span><span class="token punctuation">.</span><span class="token constant">BROADCASTING</span> <span class="token comment">// 设置为广播消费</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Demo05Message</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Demo05Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[onMessage][线程编号:{} 消息内容：{}]&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_6-4测试" tabindex="-1"><a class="header-anchor" href="#_6-4测试" aria-hidden="true">#</a> 6.4测试</h3><p>创建 Demo05ProducerTest 测试类，用于测试广播消费。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo05ProducerTest</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">Demo05Producer</span> producer<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 阻塞等待，保证消费</span>
        <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSyncSend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SendResult</span> result <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">syncSend</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[testSyncSend][发送编号：[{}] 发送结果：[{}]]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 阻塞等待，保证消费</span>
        <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>首先，执行 <code>#test()</code> 测试方法，先启动一个消费者分组 <code>&quot;demo05-consumer-group-DEMO_05&quot;</code> 的 Consumer 节点。</p><p>然后，执行 <code>#testSyncSend()</code> 测试方法，先启动一个消费者分组 <code>&quot;demo05-consumer-group-DEMO_05&quot;</code> 的 Consumer 节点。同时，该测试方法，调用 <code>Demo05ProducerTest#syncSend(id)</code> 方法，同步发送了一条消息。控制台输出如下：</p><p><img src="`+v+'" alt="Snipaste_2023-06-23_17-34-22"></p><p><img src="'+b+`" alt="Snipaste_2023-06-23_17-34-32"></p><ul><li>消费者分组 <code>&quot;demo05-consumer-group-DEMO_05&quot;</code> 的<strong>两个</strong> Consumer 节点，都消费了这条发送的消息。符合广播消费的预期~</li></ul><h2 id="_7-顺序消息" tabindex="-1"><a class="header-anchor" href="#_7-顺序消息" aria-hidden="true">#</a> 7.顺序消息</h2><p>RocketMQ 提供了两种顺序级别：</p><ul><li>普通顺序消息 ：Producer 将相关联的消息发送到相同的消息队列。</li><li>完全严格顺序 ：在【普通顺序消息】的基础上，Consumer 严格顺序消费。</li></ul><p>目前已知的应用只有数据库 binlog 同步强依赖严格顺序消息，其他应用绝大部分都可以容忍短暂乱序，推荐使用普通的顺序消息。</p><p>如下是 RocketMQ 官方文档对这两种顺序级别的定义：</p><ul><li>普通顺序消费模式下，消费者通过同一个消费队列收到的消息是有顺序的，不同消息队列收到的消息则可能是无顺序的。</li><li>严格顺序消息模式下，消费者收到的所有消息均是有顺序的。</li></ul><h3 id="_7-1demo06message" tabindex="-1"><a class="header-anchor" href="#_7-1demo06message" aria-hidden="true">#</a> 7.1Demo06Message</h3><p>创建 Demo06Message 消息类，提供给当前示例使用。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06Message</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOPIC</span> <span class="token operator">=</span> <span class="token string">&quot;DEMO_06&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 编号
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2demo06producer" tabindex="-1"><a class="header-anchor" href="#_7-2demo06producer" aria-hidden="true">#</a> 7.2Demo06Producer</h3><p>创建 Demo06Producer 类，它会使用 RocketMQ-Spring 封装提供的 RocketMQTemplate ，实现三种发送顺序消息的方式。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06Producer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RocketMQTemplate</span> rocketMQTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">SendResult</span> <span class="token function">syncSendOrderly</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 Demo06Message 消息</span>
        <span class="token class-name">Demo06Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo06Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 同步发送消息</span>
        <span class="token keyword">return</span> rocketMQTemplate<span class="token punctuation">.</span><span class="token function">syncSendOrderly</span><span class="token punctuation">(</span><span class="token class-name">Demo06Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">asyncSendOrderly</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">,</span> <span class="token class-name">SendCallback</span> callback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 Demo06Message 消息</span>
        <span class="token class-name">Demo06Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo06Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 异步发送消息</span>
        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">asyncSendOrderly</span><span class="token punctuation">(</span><span class="token class-name">Demo06Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">,</span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onewaySendOrderly</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 Demo06Message 消息</span>
        <span class="token class-name">Demo06Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo06Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        message<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 异步发送消息</span>
        rocketMQTemplate<span class="token punctuation">.</span><span class="token function">sendOneWayOrderly</span><span class="token punctuation">(</span><span class="token class-name">Demo06Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p>相比 Demo01Producer 来说，调用了对应的 Orderly 方法，从而实现发送顺序消息。</p></li><li><p>同时，需要传入方法参数 <code>hashKey</code> ，作为选择消息队列的键（一般情况下，可以使用订单号、商品号、用户编号）。</p></li></ul>`,72),kn={href:"https://github.com/apache/rocketmq/blob/master/client/src/main/java/org/apache/rocketmq/client/producer/MessageQueueSelector.java",target:"_blank",rel:"noopener noreferrer"},mn={href:"https://github.com/apache/rocketmq/blob/master/client/src/main/java/org/apache/rocketmq/client/producer/selector/SelectMessageQueueByHash.java",target:"_blank",rel:"noopener noreferrer"},vn=n("code",null,"hashKey",-1),bn={href:"https://github.com/apache/rocketmq/blob/master/client/src/main/java/org/apache/rocketmq/client/producer/selector/SelectMessageQueueByRandom.java",target:"_blank",rel:"noopener noreferrer"},gn={href:"https://github.com/apache/rocketmq/blob/master/client/src/main/java/org/apache/rocketmq/client/producer/selector/SelectMessageQueueByMachineRoom.java",target:"_blank",rel:"noopener noreferrer"},hn=n("li",null,"未使用 MessageQueueSelector 时，采用轮询的策略，选择队列。",-1),yn=t(`<p>RocketMQTemplate 在发送顺序消息时，默认采用 SelectMessageQueueByHash 策略。如此，相同的 <code>hashKey</code> 的消息，就可以发送到相同的 Topic 的对应队列中。这种形式，就是我们上文提到的<strong>普通</strong>顺序消息的方式。</p><h3 id="_7-3demo06consumer" tabindex="-1"><a class="header-anchor" href="#_7-3demo06consumer" aria-hidden="true">#</a> 7.3Demo06Consumer</h3><p>创建 Demo06Consumer 类，实现 Rocket-Spring 定义的 RocketMQListener 接口，消费消息。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>
        topic <span class="token operator">=</span> <span class="token class-name">Demo06Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span>
        consumerGroup <span class="token operator">=</span> <span class="token string">&quot;demo06-consumer-group-&quot;</span> <span class="token operator">+</span> <span class="token class-name">Demo06Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span>
        consumeMode <span class="token operator">=</span> <span class="token class-name">ConsumeMode</span><span class="token punctuation">.</span><span class="token constant">ORDERLY</span> <span class="token comment">// 设置为顺序消费</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Demo06Message</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Demo06Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[onMessage][线程编号:{} 消息内容：{}]&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// sleep 2 秒，用于查看顺序消费的效果</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> ignore<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>@RocketMQMessageListener</code> 注解，通过设置了 <code>consumeMode = ConsumeMode.ORDERLY</code> ，表示使用<strong>顺序消费</strong>。</li></ul><h3 id="_7-4测试" tabindex="-1"><a class="header-anchor" href="#_7-4测试" aria-hidden="true">#</a> 7.4测试</h3><p>创建 Demo06ProducerTest 测试类，编写三个单元测试方法，调用 Demo06Producer 三种发送顺序消息的方式。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo06ProducerTest</span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">Demo06Producer</span> producer<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSyncSendOrderly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 发送多条消息</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// 固定成 1024 ，方便我们测试是否发送到相同消息队列</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">SendResult</span> result <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">syncSendOrderly</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[testSyncSendOrderly][发送编号：[{}] 发送结果：[{}]]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 阻塞等待，保证消费</span>
        <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testASyncSendOrderly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// 固定成 1024 ，方便我们测试是否发送到相同消息队列</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            producer<span class="token punctuation">.</span><span class="token function">asyncSendOrderly</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[testASyncSendOrderly][发送编号：[{}] 发送成功，结果为：[{}]]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token annotation punctuation">@Override</span>
                <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[testASyncSendOrderly][发送编号：[{}] 发送异常]]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 阻塞等待，保证消费</span>
        <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testOnewaySendOrderly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token comment">// 固定成 1024 ，方便我们测试是否发送到相同消息队列</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            producer<span class="token punctuation">.</span><span class="token function">onewaySendOrderly</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[testOnewaySendOrderly][发送编号：[{}] 发送完成]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 阻塞等待，保证消费</span>
        <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 <code>#testSyncSendOrderly()</code> 方法，测试同步发送<strong>顺序</strong>消息。控制台输出如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># Producer 同步发送 3 条顺序消息成功，都发送到了 Topic 为 DEMO_06 ，队列编号为 1 的消息队列上
2023-06-23 17:57:26.662  INFO 1364 --- [           main] c.k.s.l.r.producer.Demo06ProducerTest    : [testSyncSendOrderly][发送编号：[1024] 发送结果：[SendResult [sendStatus=SEND_OK, msgId=7F000001055418B4AAC2752655550000, offsetMsgId=C0A8646400002A9F00000000000063FD, messageQueue=MessageQueue [topic=DEMO_06, brokerName=broker-a, queueId=1], queueOffset=3]]]
2023-06-23 17:57:26.702  INFO 1364 --- [           main] c.k.s.l.r.producer.Demo06ProducerTest    : [testSyncSendOrderly][发送编号：[1024] 发送结果：[SendResult [sendStatus=SEND_OK, msgId=7F000001055418B4AAC2752656090002, offsetMsgId=C0A8646400002A9F0000000000006538, messageQueue=MessageQueue [topic=DEMO_06, brokerName=broker-a, queueId=1], queueOffset=4]]]
2023-06-23 17:57:26.710  INFO 1364 --- [           main] c.k.s.l.r.producer.Demo06ProducerTest    : [testSyncSendOrderly][发送编号：[1024] 发送结果：[SendResult [sendStatus=SEND_OK, msgId=7F000001055418B4AAC2752656310004, offsetMsgId=C0A8646400002A9F0000000000006673, messageQueue=MessageQueue [topic=DEMO_06, brokerName=broker-a, queueId=1], queueOffset=5]]]
# 第一条消息的消费
2023-06-23 17:57:26.746  INFO 1364 --- [group-DEMO_06_1] c.k.s.l.r.consumer.Demo06Consumer        : [onMessage][线程编号:127 消息内容：Demo06Message(id=1024)]
# 第二条消息的消费
2023-06-23 17:57:28.748  INFO 1364 --- [group-DEMO_06_1] c.k.s.l.r.consumer.Demo06Consumer        : [onMessage][线程编号:127 消息内容：Demo06Message(id=1024)]
# 第三条消息的消费
2023-06-23 17:57:30.749  INFO 1364 --- [group-DEMO_06_1] c.k.s.l.r.consumer.Demo06Consumer        : [onMessage][线程编号:127 消息内容：Demo06Message(id=1024)]

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Producer 发送顺序消息时，因为我们使用 <code>id = 1024</code> 作为 <code>hashKey</code> ，所以都发送到了 Topic 为 <code>&quot;DEMO_06&quot;</code> ，队列编号为 1 的消息队列。</li><li>Consumer <strong>顺序</strong>消费消息时，是在<strong>单线程</strong>中，顺序消费每条消息。</li></ul><h2 id="_8-事务消息" tabindex="-1"><a class="header-anchor" href="#_8-事务消息" aria-hidden="true">#</a> 8.事务消息</h2><p>分布式系统调用的特点为一个核心业务逻辑的执行，同时需要调用多个下游业务进行处理。因此，如何保证核心业务和多个下游业务的执行结果完全一致，是分布式事务需要解决的主要问题。</p><p>以电商交易场景为例，用户支付订单这一核心操作的同时会涉及到下游物流发货、积分变更、购物车状态清空等多个子系统的变更。当前业务的处理分支包括：</p><ul><li>主分支订单系统状态更新：由未支付变更为支付成功。</li><li>物流系统状态新增：新增待发货物流记录，创建订单物流记录。</li><li>积分系统状态变更：变更用户积分，更新用户积分表。</li><li>购物车系统状态变更：清空购物车，更新用户购物车记录。</li></ul><p><strong>传统XA事务方案：性能不足</strong></p><p>为了保证上述四个分支的执行结果一致性，典型方案是基于XA协议的分布式事务系统来实现。将四个调用分支封装成包含四个独立事务分支的大事务。基于XA分布式事务的方案可以满足业务处理结果的正确性，但最大的缺点是多分支环境下资源锁定范围大，并发度低，随着下游分支的增加，系统性能会越来越差。</p><p><strong>基于普通消息方案：一致性保障困难</strong></p><p>将上述基于XA事务的方案进行简化，将订单系统变更作为本地事务，剩下的系统变更作为普通消息的下游来执行，事务分支简化成普通消息+订单表事务，充分利用消息异步化的能力缩短链路，提高并发度。</p><p>该方案中消息下游分支和订单系统变更的主分支很容易出现不一致的现象，例如：</p><ul><li>消息发送成功，订单没有执行成功，需要回滚整个事务。</li><li>订单执行成功，消息没有发送成功，需要额外补偿才能发现不一致。</li><li>消息发送超时未知，此时无法判断需要回滚订单还是提交订单变更。</li></ul><p><strong>基于Apache RocketMQ分布式事务消息：支持最终一致性</strong></p><p>上述普通消息方案中，普通消息和订单事务无法保证一致的原因，本质上是由于普通消息无法像单机数据库事务一样，具备提交、回滚和统一协调的能力。</p><p>而基于Apache RocketMQ实现的分布式事务消息功能，在普通消息基础上，支持二阶段的提交能力。将二阶段提交和本地事务绑定，实现全局提交结果的一致性。</p><p>Apache RocketMQ事务消息的方案，具备高性能、可扩展、业务开发简单的优势。具体事务消息的原理和流程，请参见下文的功能原理。</p><h3 id="_8-1demo07message" tabindex="-1"><a class="header-anchor" href="#_8-1demo07message" aria-hidden="true">#</a> 8.1Demo07Message</h3><p>创建 Demo07Message 消息类，提供给当前示例使用。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Data</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo07Message</span> <span class="token punctuation">{</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> <span class="token constant">TOPIC</span> <span class="token operator">=</span> <span class="token string">&quot;DEMO_07&quot;</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * 编号
     */</span>
    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-2demo07producer" tabindex="-1"><a class="header-anchor" href="#_8-2demo07producer" aria-hidden="true">#</a> 8.2Demo07Producer</h3><p>创建 Demo07Producer 类，它会使用 RocketMQ-Spring 封装提供的 RocketMQTemplate ，实现发送事务消息。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Component</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo07Producer</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">RocketMQTemplate</span> rocketMQTemplate<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">TransactionSendResult</span> <span class="token function">sendMessageInTransaction</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建 Demo07Message 消息</span>
        <span class="token class-name">Demo07Message</span> demo07Message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Demo07Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        demo07Message<span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Demo07Message</span><span class="token punctuation">&gt;</span></span> message <span class="token operator">=</span> <span class="token class-name">MessageBuilder</span><span class="token punctuation">.</span><span class="token function">withPayload</span><span class="token punctuation">(</span>demo07Message<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 发送事务消息</span>
        <span class="token keyword">return</span> rocketMQTemplate<span class="token punctuation">.</span><span class="token function">sendMessageInTransaction</span><span class="token punctuation">(</span><span class="token class-name">Demo07Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span> message<span class="token punctuation">,</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-3transactionlistenerimpl" tabindex="-1"><a class="header-anchor" href="#_8-3transactionlistenerimpl" aria-hidden="true">#</a> 8.3TransactionListenerImpl</h3><p>在 Demo07Producer 类中，创建一个内部类 TransactionListenerImpl ，实现 MQ 事务的监听。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@RocketMQTransactionListener</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TransactionListenerImpl</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQLocalTransactionListener</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RocketMQLocalTransactionState</span> <span class="token function">executeLocalTransaction</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[executeLocalTransaction][执行本地事务, 消息：{} arg：{}]&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">,</span> arg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">RocketMQLocalTransactionState</span><span class="token punctuation">.</span><span class="token constant">UNKNOWN</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">RocketMQLocalTransactionState</span> <span class="token function">checkLocalTransaction</span><span class="token punctuation">(</span><span class="token class-name">Message</span> msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[checkLocalTransaction][回查消息：{}]&quot;</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">RocketMQLocalTransactionState</span><span class="token punctuation">.</span><span class="token constant">COMMIT</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,34),Mn=n("p",null,[n("code",null,"#executeLocalTransaction(...)"),s(" 方法，实现执行本地事务。")],-1),wn=n("strong",null,"模板方法",-1),_n={href:"https://github.com/apache/rocketmq-spring/blob/3f89080df8f797cad0d1f9eb8badb5050b09a553/rocketmq-spring-boot/src/main/java/org/apache/rocketmq/spring/core/RocketMQLocalTransactionState.java",target:"_blank",rel:"noopener noreferrer"},fn=n("li",null,[s("这里，我们为了模拟 RocketMQ 回查 Producer 来获得事务消息的状态，所以返回了 "),n("code",null,"RocketMQLocalTransactionState.UNKNOWN"),s(" 未知状态。")],-1),Dn=n("li",null,[n("p",null,[n("code",null,"#checkLocalTransaction(...)"),s(" 方法，检查本地事务。")]),n("ul",null,[n("li",null,[n("p",null,"在事务消息长事件未被提交或回滚时，RocketMQ 会回查事务消息对应的生产者分组下的 Producer ，获得事务消息的状态。此时，该方法就会被调用。")]),n("li",null,[n("p",null,[s("这里，我们直接返回 "),n("code",null,"RocketMQLocalTransactionState.COMMIT"),s(" 提交状态。")])])])],-1),Sn=t(`<p>一般来说，有两种方式实现本地事务回查时，返回事务消息的状态。</p><p><strong>第一种</strong>，通过 <code>msg</code> 消息，获得某个业务上的标识或者编号，然后去数据库中查询业务记录，从而判断该事务消息的状态是提交还是回滚。</p><p><strong>第二种</strong>，记录 <code>msg</code> 的事务编号，与事务状态到数据库中。</p><ul><li>第一步，在 <code>#executeLocalTransaction(...)</code> 方法中，先存储一条 <code>id</code> 为 <code>msg</code> 的事务编号，状态为 <code>RocketMQLocalTransactionState.UNKNOWN</code> 的记录。</li><li>第二步，调用带有<strong>事务的</strong>业务 Service 的方法。在该 Service 方法中，在逻辑都执行成功的情况下，更新 <code>id</code> 为 <code>msg</code> 的事务编号，状态变更为 <code>RocketMQLocalTransactionState.COMMIT</code> 。这样，我们就可以伴随这个事务的提交，更新 <code>id</code> 为 <code>msg</code> 的事务编号的记录的状为 <code>RocketMQLocalTransactionState.COMMIT</code> ，美滋滋。。</li><li>第三步，要以 <code>try-catch</code> 的方式，调用业务 Service 的方法。如此，如果发生异常，回滚事务的时候，可以在 <code>catch</code> 中，更新 <code>id</code> 为 <code>msg</code> 的事务编号的记录的状态为 <code>RocketMQLocalTransactionState.ROLLBACK</code> 。😭 极端情况下，可能更新失败，则打印 error 日志，告警知道，人工介入。</li><li>如此三步之后，我们在 <code>#executeLocalTransaction(...)</code> 方法中，就可以通过查找数据库，<code>id</code> 为 <code>msg</code> 的事务编号的记录的状态，然后返回。</li></ul><p><strong>相比来说</strong>，倾向第二种，实现更加简单通用，对于业务开发者，更加友好。</p><h3 id="_8-4demo07consumer" tabindex="-1"><a class="header-anchor" href="#_8-4demo07consumer" aria-hidden="true">#</a> 8.4Demo07Consumer</h3><p>创建 Demo03Consumer 类，实现 Rocket-Spring 定义的 RocketMQListener 接口，消费消息。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@Component</span>
<span class="token annotation punctuation">@RocketMQMessageListener</span><span class="token punctuation">(</span>
        topic <span class="token operator">=</span> <span class="token class-name">Demo07Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span><span class="token punctuation">,</span>
        consumerGroup <span class="token operator">=</span> <span class="token string">&quot;demo07-consumer-group-&quot;</span> <span class="token operator">+</span> <span class="token class-name">Demo07Message</span><span class="token punctuation">.</span><span class="token constant">TOPIC</span>
<span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo07Consumer</span> <span class="token keyword">implements</span> <span class="token class-name">RocketMQListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Demo07Message</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">Demo07Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[onMessage][线程编号:{} 消息内容：{}]&quot;</span><span class="token punctuation">,</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-5测试" tabindex="-1"><a class="header-anchor" href="#_8-5测试" aria-hidden="true">#</a> 8.5测试</h3><p>创建 Demo07ProducerTest 测试类，编写单元测试方法，调用 Demo07Producer 发送事务消息的方式。代码如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * <span class="token keyword">@author</span> zjh - kayson
 */</span>
<span class="token annotation punctuation">@Slf4j</span>
<span class="token annotation punctuation">@ExtendWith</span><span class="token punctuation">(</span><span class="token class-name">SpringExtension</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@SpringBootTest</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo07ProducerTest</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Resource</span>
    <span class="token keyword">private</span> <span class="token class-name">Demo07Producer</span> producer<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSendMessageInTransaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">SendResult</span> result <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">sendMessageInTransaction</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>
        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[testSendMessageInTransaction][发送编号：[{}] 发送结果：[{}]]&quot;</span><span class="token punctuation">,</span> id<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 阻塞等待，保证消费</span>
        <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行 <code>#testSendMessageInTransaction()</code> 方法，测试发送<strong>事务</strong>消息。控制台输出如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># TransactionListenerImpl 执行 executeLocalTransaction 方法，先执行本地事务的逻辑
2023-06-24 11:11:34.571  INFO 3464 --- [           main] p.Demo07Producer$TransactionListenerImpl : [executeLocalTransaction][执行本地事务, 消息：GenericMessage [payload=byte[17], headers={rocketmq_TOPIC=DEMO_07, rocketmq_FLAG=0, __transactionId__=7F0000010D8818B4AAC278D91BBE0000, rocketmq_TRANSACTION_ID=7F0000010D8818B4AAC278D91BBE0000, id=63b95fae-c34e-0f94-20bc-c09f7ff2cabc, contentType=application/json, timestamp=1687576294571}] arg：1687576294]

# Producer 发送事务消息成功，但是因为 executeLocalTransaction 方法返回的是 UNKOWN 状态，所以事务消息并未提交或者回滚
2023-06-24 11:11:34.573  INFO 3464 --- [           main] c.k.s.l.r.producer.Demo07ProducerTest    : [testSendMessageInTransaction][发送编号：[1687576294] 发送结果：[SendResult [sendStatus=SEND_OK, msgId=7F0000010D8818B4AAC278D91BBE0000, offsetMsgId=null, messageQueue=MessageQueue [topic=DEMO_07, brokerName=broker-a, queueId=2], queueOffset=4]]]

# RocketMQ Broker 在发送事务消息 30 秒后，发现事务消息还未提交或是回滚，所以回查 Producer 。此时，checkLocalTransaction 方法返回 COMMIT ，所以该事务消息被提交
2023-06-24 11:11:52.420  INFO 3464 --- [pool-1-thread-1] p.Demo07Producer$TransactionListenerImpl : [checkLocalTransaction][回查消息：GenericMessage [payload=byte[17], headers={rocketmq_QUEUE_ID=2, TRANSACTION_CHECK_TIMES=1, rocketmq_DELAY=0, rocketmq_BORN_TIMESTAMP=1687576294510, rocketmq_TOPIC=DEMO_07, rocketmq_FLAG=0, __transactionId__=7F0000010D8818B4AAC278D91BBE0000, rocketmq_MESSAGE_ID=C0A8646400002A9F0000000000009C4C, rocketmq_WAIT=false, rocketmq_TRANSACTION_ID=7F0000010D8818B4AAC278D91BBE0000, rocketmq_SYS_FLAG=0, id=80174b77-cd60-9334-74c5-e40e5470efbd, rocketmq_BORN_HOST=172.17.0.1, contentType=application/json, timestamp=1687576312419}]]

# 事务消息被提交，所以该消息被 Consumer 消费
2023-06-24 11:11:52.475  INFO 3464 --- [group-DEMO_07_1] c.k.s.l.r.consumer.Demo07Consumer        : [onMessage][线程编号:191 消息内容：Demo07Message(id=1687576294)]

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_9-接入阿里云的消息队列-rocketmq" tabindex="-1"><a class="header-anchor" href="#_9-接入阿里云的消息队列-rocketmq" aria-hidden="true">#</a> 9. 接入阿里云的消息队列 RocketMQ</h2>`,14),Tn={href:"https://help.aliyun.com/document_detail/128602.html",target:"_blank",rel:"noopener noreferrer"},qn=t(`<p>如果您已使用开源 Java SDK 进行生产，只需参考方法，重新配置参数，即可实现无缝上云。</p><p><strong>前提条件</strong></p><ul><li>已在阿里云 MQ 控制台创建资源，包括 Topic、Group ID（GID）、接入点（Endpoint），以及 AccessKeyId 和 AccessKeySecret。</li><li>已下载开源 RocketMQ 4.5.1 或以上版本，以支持连接阿里云 MQ。</li></ul><p>重点的差异，就在 application.yaml 配置文件，配置如下：</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># rocketmq 配置项，对应 RocketMQProperties 配置类</span>
<span class="token key atrule">rocketmq</span><span class="token punctuation">:</span>
  <span class="token key atrule">name-server</span><span class="token punctuation">:</span> http<span class="token punctuation">:</span>//onsaddr.mq<span class="token punctuation">-</span>internet<span class="token punctuation">-</span>access.mq<span class="token punctuation">-</span>internet.aliyuncs.com<span class="token punctuation">:</span><span class="token number">80</span> <span class="token comment"># 阿里云 RocketMQ Namesrv</span>
  <span class="token key atrule">access-channel</span><span class="token punctuation">:</span> CLOUD <span class="token comment"># 设置使用阿里云</span>
  <span class="token comment"># Producer 配置项</span>
  <span class="token key atrule">producer</span><span class="token punctuation">:</span>
    <span class="token key atrule">group</span><span class="token punctuation">:</span> GID_PRODUCER_GROUP_YUNAI_TEST <span class="token comment"># 生产者分组</span>
    <span class="token key atrule">access-key</span><span class="token punctuation">:</span> <span class="token comment"># 设置阿里云的 RocketMQ 的 access key </span>
    <span class="token key atrule">secret-key</span><span class="token punctuation">:</span> <span class="token comment"># 设置阿里云的 RocketMQ 的 secret key </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>重点，就是设置了 <code>rocketmq.access-channel=CLOUD</code> ，访问阿里云 RocketMQ 服务。</li></ul>`,6);function Rn(Qn,jn){const a=o("ExternalLinkIcon");return c(),l("div",null,[h,n("div",y,[M,n("p",null,[w,s("："),n("a",_,[s("RocketMQ 5.0"),e(a)])])]),f,D,S,n("p",null,[n("a",T,[s("RocketMQ-Spring"),e(a)]),s(" 项目，RocketMQ 对 Spring 的集成支持。主要有两方面的功能：")]),n("ul",null,[q,n("li",null,[s("功能二：帮助开发者在 "),n("a",R,[s("Spring Boot"),e(a)]),s(" 中快速集成 "),n("a",Q,[s("RocketMQ"),e(a)]),s(" 。")])]),j,n("ul",null,[n("li",null,[s("在 "),C,s(" 配置项，设置 RocketMQ 的配置，对应 "),n("a",I,[s("RocketMQProperties"),e(a)]),s(" 配置类。")]),n("li",null,[s("RocketMQ-Spring "),n("a",x,[s("RocketMQAutoConfiguration"),e(a)]),s(" 自动化配置类，实现 RocketMQ 的自动配置，创建相应的 Producer 和 Consumer 。")]),O]),P,n("p",null,[s("RocketMQTemplate 类，它继承 Spring Messaging 定义的 "),n("a",E,[s("AbstractMessageSendingTemplate"),e(a)]),s(" 抽象类，以达到融入 Spring Messaging 体系中。")]),n("p",null,[s("在 RocketMQTemplate 中，会创建一个 RocketMQ DefaultMQProducer 生产者 "),n("a",L,[A,e(a)]),s(" ，所以 RocketMQTemplate 后续的各种发送消息的方法，都是使用它。😈 当然，因为 RocketMQTemplate 的封装，所以我们可以像使用 Spring Messaging 一样的方式，进行消息的发送，而无需直接使用 RocketMQ 提供的 Producer 发送消息。")]),n("p",null,[s("消息 Message 是怎么序列化方式，见 "),n("a",B,[s("RocketMQUtil#convertToRocketMessage(...)"),e(a)]),s(" 方法的代码。")]),n("ul",null,[n("li",null,[n("p",null,[s("对于复杂对象，RocketMQ-Spring 的默认使用 "),n("a",N,[s("MappingJackson2MessageConverter"),e(a)]),s(" 或 "),n("a",z,[s("MappingFastJsonMessageConverter"),e(a)]),s(" ，即使用 "),F,s(" 格式序列化和反序列化 Message 消息内容。")])]),G,K]),W,n("p",null,[s("在类上，添加了 "),n("a",U,[J,e(a)]),s(" 注解，声明消费的 Topic 是 "),Y,s('，消费者分组是 "'),V,s('" 。一般情况下，建议一个消费者分组，仅消费一个 Topic 。这样做会有两个好处：')]),X,n("p",null,[H,s("，设置消费的消息对应的类是 RocketMQ 内置的 "),n("a",$,[s("MessageExt"),e(a)]),s(" 类。通过 MessageExt 类，可以获取到消费的消息的更多信息，例如说消息的所属队列、创建时间等等属性，不过消息的内容("),Z,s(")就需要自己去反序列化。当然，一般情况下不会使用 MessageExt 类。")]),nn,n("p",null,[s("RocketMQ-Spring 考虑到开发者可能需要连接多个不同的 RocketMQ 集群，所以提供了 "),n("a",sn,[an,e(a)]),s(" 注解，实现配置连接不同 RocketMQ 集群的 Producer 的 RocketMQTemplate Bean 对象。")]),en,n("ul",null,[tn,n("li",null,[s("要注意方法参数 "),pn,s(" ，每个集合的元素必须是 Spring Messaging 定义的 "),n("a",on,[s("Message"),e(a)]),s(" 消息。😈 RocketMQTemplate 重载了非常多的 "),cn,s(" 方法，一定要小心哟。")]),ln]),un,n("p",null,[s("如果想要任一时刻的定时消息，可以考虑借助 MySQL + Job 来实现。或者考虑使用 "),n("a",dn,[s("DDMQ"),e(a)]),s("(滴滴打车基于 RocketMQ 和 Kafka 改造的开源消息队列) 。")]),rn,n("p",null,[s("在 RocketMQ 中，Producer 可以根据定义 "),n("a",kn,[s("MessageQueueSelector"),e(a)]),s(" 消息队列选择策略，选择 Topic 下的队列。目前提供三种策略：")]),n("ul",null,[n("li",null,[n("a",mn,[s("SelectMessageQueueByHash"),e(a)]),s(" ，基于 "),vn,s(" 的哈希值取余，选择对应的队列。")]),n("li",null,[n("a",bn,[s("SelectMessageQueueByRandom"),e(a)]),s(" ，基于随机的策略，选择队列。")]),n("li",null,[n("a",gn,[s("SelectMessageQueueByMachineRoom"),e(a)]),s(" ，😈 有点看不懂，目前是空的实现，暂时无视吧。")]),hn]),yn,n("ul",null,[n("li",null,[Mn,n("ul",null,[n("li",null,[s("注意，这是一个"),wn,s("。在调用这个方法之前，RocketMQTemplate 已经使用 Producer 发送了一条事务消息。然后根据该方法执行的返回的 "),n("a",_n,[s("RocketMQLocalTransactionState"),e(a)]),s(" 结果，提交还是回滚该事务消息。")]),fn])]),Dn]),Sn,n("p",null,[s("在 "),n("a",Tn,[s("《阿里云 —— 消息队列 MQ —— 开源 Java SDK 接入说明》"),e(a)]),s(" 中，提到目前开源的 Java SDK 可以接入阿里云 RocketMQ 服务。")]),qn])}const In=p(g,[["render",Rn],["__file","SpringBoot RocketMQ入门.html.vue"]]);export{In as default};
